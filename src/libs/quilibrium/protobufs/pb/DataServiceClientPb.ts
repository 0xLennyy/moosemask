/**
 * @fileoverview gRPC-Web generated client stub for quilibrium.node.data.pb
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.20.3
// source: data.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as channel_pb from './channel_pb'; // proto import: "channel.proto"
import * as clock_pb from './clock_pb'; // proto import: "clock.proto"
import * as data_pb from './data_pb'; // proto import: "data.proto"
import * as node_pb from './node_pb'; // proto import: "node.proto"


export class DataServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetCompressedSyncFrames = new grpcWeb.MethodDescriptor(
    '/quilibrium.node.data.pb.DataService/GetCompressedSyncFrames',
    grpcWeb.MethodType.SERVER_STREAMING,
    clock_pb.ClockFramesRequest,
    data_pb.DataCompressedSync,
    (request: clock_pb.ClockFramesRequest) => {
      return request.serializeBinary();
    },
    data_pb.DataCompressedSync.deserializeBinary
  );

  getCompressedSyncFrames(
    request: clock_pb.ClockFramesRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<data_pb.DataCompressedSync> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/quilibrium.node.data.pb.DataService/GetCompressedSyncFrames',
      request,
      metadata || {},
      this.methodDescriptorGetCompressedSyncFrames);
  }

  methodDescriptorGetDataFrame = new grpcWeb.MethodDescriptor(
    '/quilibrium.node.data.pb.DataService/GetDataFrame',
    grpcWeb.MethodType.UNARY,
    data_pb.GetDataFrameRequest,
    data_pb.DataFrameResponse,
    (request: data_pb.GetDataFrameRequest) => {
      return request.serializeBinary();
    },
    data_pb.DataFrameResponse.deserializeBinary
  );

  getDataFrame(
    request: data_pb.GetDataFrameRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_pb.DataFrameResponse>;

  getDataFrame(
    request: data_pb.GetDataFrameRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_pb.DataFrameResponse) => void): grpcWeb.ClientReadableStream<data_pb.DataFrameResponse>;

  getDataFrame(
    request: data_pb.GetDataFrameRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_pb.DataFrameResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quilibrium.node.data.pb.DataService/GetDataFrame',
        request,
        metadata || {},
        this.methodDescriptorGetDataFrame,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quilibrium.node.data.pb.DataService/GetDataFrame',
    request,
    metadata || {},
    this.methodDescriptorGetDataFrame);
  }

  methodDescriptorHandlePreMidnightMint = new grpcWeb.MethodDescriptor(
    '/quilibrium.node.data.pb.DataService/HandlePreMidnightMint',
    grpcWeb.MethodType.UNARY,
    node_pb.MintCoinRequest,
    data_pb.PreMidnightMintResponse,
    (request: node_pb.MintCoinRequest) => {
      return request.serializeBinary();
    },
    data_pb.PreMidnightMintResponse.deserializeBinary
  );

  handlePreMidnightMint(
    request: node_pb.MintCoinRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_pb.PreMidnightMintResponse>;

  handlePreMidnightMint(
    request: node_pb.MintCoinRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_pb.PreMidnightMintResponse) => void): grpcWeb.ClientReadableStream<data_pb.PreMidnightMintResponse>;

  handlePreMidnightMint(
    request: node_pb.MintCoinRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_pb.PreMidnightMintResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quilibrium.node.data.pb.DataService/HandlePreMidnightMint',
        request,
        metadata || {},
        this.methodDescriptorHandlePreMidnightMint,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quilibrium.node.data.pb.DataService/HandlePreMidnightMint',
    request,
    metadata || {},
    this.methodDescriptorHandlePreMidnightMint);
  }

  methodDescriptorGetPreMidnightMintStatus = new grpcWeb.MethodDescriptor(
    '/quilibrium.node.data.pb.DataService/GetPreMidnightMintStatus',
    grpcWeb.MethodType.UNARY,
    data_pb.PreMidnightMintStatusRequest,
    data_pb.PreMidnightMintResponse,
    (request: data_pb.PreMidnightMintStatusRequest) => {
      return request.serializeBinary();
    },
    data_pb.PreMidnightMintResponse.deserializeBinary
  );

  getPreMidnightMintStatus(
    request: data_pb.PreMidnightMintStatusRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_pb.PreMidnightMintResponse>;

  getPreMidnightMintStatus(
    request: data_pb.PreMidnightMintStatusRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_pb.PreMidnightMintResponse) => void): grpcWeb.ClientReadableStream<data_pb.PreMidnightMintResponse>;

  getPreMidnightMintStatus(
    request: data_pb.PreMidnightMintStatusRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_pb.PreMidnightMintResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quilibrium.node.data.pb.DataService/GetPreMidnightMintStatus',
        request,
        metadata || {},
        this.methodDescriptorGetPreMidnightMintStatus,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quilibrium.node.data.pb.DataService/GetPreMidnightMintStatus',
    request,
    metadata || {},
    this.methodDescriptorGetPreMidnightMintStatus);
  }

}

export class DataIPCServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCalculateChallengeProof = new grpcWeb.MethodDescriptor(
    '/quilibrium.node.data.pb.DataIPCService/CalculateChallengeProof',
    grpcWeb.MethodType.UNARY,
    data_pb.ChallengeProofRequest,
    data_pb.ChallengeProofResponse,
    (request: data_pb.ChallengeProofRequest) => {
      return request.serializeBinary();
    },
    data_pb.ChallengeProofResponse.deserializeBinary
  );

  calculateChallengeProof(
    request: data_pb.ChallengeProofRequest,
    metadata?: grpcWeb.Metadata | null): Promise<data_pb.ChallengeProofResponse>;

  calculateChallengeProof(
    request: data_pb.ChallengeProofRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: data_pb.ChallengeProofResponse) => void): grpcWeb.ClientReadableStream<data_pb.ChallengeProofResponse>;

  calculateChallengeProof(
    request: data_pb.ChallengeProofRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: data_pb.ChallengeProofResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quilibrium.node.data.pb.DataIPCService/CalculateChallengeProof',
        request,
        metadata || {},
        this.methodDescriptorCalculateChallengeProof,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quilibrium.node.data.pb.DataIPCService/CalculateChallengeProof',
    request,
    metadata || {},
    this.methodDescriptorCalculateChallengeProof);
  }

}

