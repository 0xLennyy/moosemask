// source: channel.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var keys_pb = require('./keys_pb.js');
goog.object.extend(proto, keys_pb);
goog.exportSymbol('proto.quilibrium.node.channel.pb.IdentityKey', null, global);
goog.exportSymbol('proto.quilibrium.node.channel.pb.IdentityKey.IdentityKeySignatureCase', null, global);
goog.exportSymbol('proto.quilibrium.node.channel.pb.InclusionAggregateProof', null, global);
goog.exportSymbol('proto.quilibrium.node.channel.pb.InclusionCommitment', null, global);
goog.exportSymbol('proto.quilibrium.node.channel.pb.KeyBundleAnnouncement', null, global);
goog.exportSymbol('proto.quilibrium.node.channel.pb.MessageCiphertext', null, global);
goog.exportSymbol('proto.quilibrium.node.channel.pb.P2PChannelEnvelope', null, global);
goog.exportSymbol('proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement', null, global);
goog.exportSymbol('proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement.ProvingKeySignatureCase', null, global);
goog.exportSymbol('proto.quilibrium.node.channel.pb.ProvingKeyRequest', null, global);
goog.exportSymbol('proto.quilibrium.node.channel.pb.SignedPreKey', null, global);
goog.exportSymbol('proto.quilibrium.node.channel.pb.SignedPreKey.SignedPreKeySignatureCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quilibrium.node.channel.pb.P2PChannelEnvelope = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quilibrium.node.channel.pb.P2PChannelEnvelope, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quilibrium.node.channel.pb.P2PChannelEnvelope.displayName = 'proto.quilibrium.node.channel.pb.P2PChannelEnvelope';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quilibrium.node.channel.pb.MessageCiphertext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quilibrium.node.channel.pb.MessageCiphertext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quilibrium.node.channel.pb.MessageCiphertext.displayName = 'proto.quilibrium.node.channel.pb.MessageCiphertext';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement.oneofGroups_);
};
goog.inherits(proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement.displayName = 'proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quilibrium.node.channel.pb.ProvingKeyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quilibrium.node.channel.pb.ProvingKeyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quilibrium.node.channel.pb.ProvingKeyRequest.displayName = 'proto.quilibrium.node.channel.pb.ProvingKeyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quilibrium.node.channel.pb.InclusionAggregateProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.quilibrium.node.channel.pb.InclusionAggregateProof.repeatedFields_, null);
};
goog.inherits(proto.quilibrium.node.channel.pb.InclusionAggregateProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quilibrium.node.channel.pb.InclusionAggregateProof.displayName = 'proto.quilibrium.node.channel.pb.InclusionAggregateProof';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quilibrium.node.channel.pb.InclusionCommitment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quilibrium.node.channel.pb.InclusionCommitment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quilibrium.node.channel.pb.InclusionCommitment.displayName = 'proto.quilibrium.node.channel.pb.InclusionCommitment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quilibrium.node.channel.pb.KeyBundleAnnouncement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quilibrium.node.channel.pb.KeyBundleAnnouncement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quilibrium.node.channel.pb.KeyBundleAnnouncement.displayName = 'proto.quilibrium.node.channel.pb.KeyBundleAnnouncement';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quilibrium.node.channel.pb.IdentityKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.quilibrium.node.channel.pb.IdentityKey.oneofGroups_);
};
goog.inherits(proto.quilibrium.node.channel.pb.IdentityKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quilibrium.node.channel.pb.IdentityKey.displayName = 'proto.quilibrium.node.channel.pb.IdentityKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quilibrium.node.channel.pb.SignedPreKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.quilibrium.node.channel.pb.SignedPreKey.oneofGroups_);
};
goog.inherits(proto.quilibrium.node.channel.pb.SignedPreKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quilibrium.node.channel.pb.SignedPreKey.displayName = 'proto.quilibrium.node.channel.pb.SignedPreKey';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quilibrium.node.channel.pb.P2PChannelEnvelope.prototype.toObject = function(opt_includeInstance) {
  return proto.quilibrium.node.channel.pb.P2PChannelEnvelope.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quilibrium.node.channel.pb.P2PChannelEnvelope} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quilibrium.node.channel.pb.P2PChannelEnvelope.toObject = function(includeInstance, msg) {
  var f, obj = {
    protocolIdentifier: jspb.Message.getFieldWithDefault(msg, 1, 0),
    messageHeader: (f = msg.getMessageHeader()) && proto.quilibrium.node.channel.pb.MessageCiphertext.toObject(includeInstance, f),
    messageBody: (f = msg.getMessageBody()) && proto.quilibrium.node.channel.pb.MessageCiphertext.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quilibrium.node.channel.pb.P2PChannelEnvelope}
 */
proto.quilibrium.node.channel.pb.P2PChannelEnvelope.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quilibrium.node.channel.pb.P2PChannelEnvelope;
  return proto.quilibrium.node.channel.pb.P2PChannelEnvelope.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quilibrium.node.channel.pb.P2PChannelEnvelope} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quilibrium.node.channel.pb.P2PChannelEnvelope}
 */
proto.quilibrium.node.channel.pb.P2PChannelEnvelope.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setProtocolIdentifier(value);
      break;
    case 2:
      var value = new proto.quilibrium.node.channel.pb.MessageCiphertext;
      reader.readMessage(value,proto.quilibrium.node.channel.pb.MessageCiphertext.deserializeBinaryFromReader);
      msg.setMessageHeader(value);
      break;
    case 3:
      var value = new proto.quilibrium.node.channel.pb.MessageCiphertext;
      reader.readMessage(value,proto.quilibrium.node.channel.pb.MessageCiphertext.deserializeBinaryFromReader);
      msg.setMessageBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quilibrium.node.channel.pb.P2PChannelEnvelope.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quilibrium.node.channel.pb.P2PChannelEnvelope.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quilibrium.node.channel.pb.P2PChannelEnvelope} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quilibrium.node.channel.pb.P2PChannelEnvelope.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProtocolIdentifier();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMessageHeader();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.quilibrium.node.channel.pb.MessageCiphertext.serializeBinaryToWriter
    );
  }
  f = message.getMessageBody();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.quilibrium.node.channel.pb.MessageCiphertext.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 protocol_identifier = 1;
 * @return {number}
 */
proto.quilibrium.node.channel.pb.P2PChannelEnvelope.prototype.getProtocolIdentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.quilibrium.node.channel.pb.P2PChannelEnvelope} returns this
 */
proto.quilibrium.node.channel.pb.P2PChannelEnvelope.prototype.setProtocolIdentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional MessageCiphertext message_header = 2;
 * @return {?proto.quilibrium.node.channel.pb.MessageCiphertext}
 */
proto.quilibrium.node.channel.pb.P2PChannelEnvelope.prototype.getMessageHeader = function() {
  return /** @type{?proto.quilibrium.node.channel.pb.MessageCiphertext} */ (
    jspb.Message.getWrapperField(this, proto.quilibrium.node.channel.pb.MessageCiphertext, 2));
};


/**
 * @param {?proto.quilibrium.node.channel.pb.MessageCiphertext|undefined} value
 * @return {!proto.quilibrium.node.channel.pb.P2PChannelEnvelope} returns this
*/
proto.quilibrium.node.channel.pb.P2PChannelEnvelope.prototype.setMessageHeader = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quilibrium.node.channel.pb.P2PChannelEnvelope} returns this
 */
proto.quilibrium.node.channel.pb.P2PChannelEnvelope.prototype.clearMessageHeader = function() {
  return this.setMessageHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quilibrium.node.channel.pb.P2PChannelEnvelope.prototype.hasMessageHeader = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional MessageCiphertext message_body = 3;
 * @return {?proto.quilibrium.node.channel.pb.MessageCiphertext}
 */
proto.quilibrium.node.channel.pb.P2PChannelEnvelope.prototype.getMessageBody = function() {
  return /** @type{?proto.quilibrium.node.channel.pb.MessageCiphertext} */ (
    jspb.Message.getWrapperField(this, proto.quilibrium.node.channel.pb.MessageCiphertext, 3));
};


/**
 * @param {?proto.quilibrium.node.channel.pb.MessageCiphertext|undefined} value
 * @return {!proto.quilibrium.node.channel.pb.P2PChannelEnvelope} returns this
*/
proto.quilibrium.node.channel.pb.P2PChannelEnvelope.prototype.setMessageBody = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quilibrium.node.channel.pb.P2PChannelEnvelope} returns this
 */
proto.quilibrium.node.channel.pb.P2PChannelEnvelope.prototype.clearMessageBody = function() {
  return this.setMessageBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quilibrium.node.channel.pb.P2PChannelEnvelope.prototype.hasMessageBody = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quilibrium.node.channel.pb.MessageCiphertext.prototype.toObject = function(opt_includeInstance) {
  return proto.quilibrium.node.channel.pb.MessageCiphertext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quilibrium.node.channel.pb.MessageCiphertext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quilibrium.node.channel.pb.MessageCiphertext.toObject = function(includeInstance, msg) {
  var f, obj = {
    initializationVector: msg.getInitializationVector_asB64(),
    ciphertext: msg.getCiphertext_asB64(),
    associatedData: msg.getAssociatedData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quilibrium.node.channel.pb.MessageCiphertext}
 */
proto.quilibrium.node.channel.pb.MessageCiphertext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quilibrium.node.channel.pb.MessageCiphertext;
  return proto.quilibrium.node.channel.pb.MessageCiphertext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quilibrium.node.channel.pb.MessageCiphertext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quilibrium.node.channel.pb.MessageCiphertext}
 */
proto.quilibrium.node.channel.pb.MessageCiphertext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setInitializationVector(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCiphertext(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssociatedData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quilibrium.node.channel.pb.MessageCiphertext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quilibrium.node.channel.pb.MessageCiphertext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quilibrium.node.channel.pb.MessageCiphertext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quilibrium.node.channel.pb.MessageCiphertext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInitializationVector_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCiphertext_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getAssociatedData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes initialization_vector = 1;
 * @return {!(string|Uint8Array)}
 */
proto.quilibrium.node.channel.pb.MessageCiphertext.prototype.getInitializationVector = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes initialization_vector = 1;
 * This is a type-conversion wrapper around `getInitializationVector()`
 * @return {string}
 */
proto.quilibrium.node.channel.pb.MessageCiphertext.prototype.getInitializationVector_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getInitializationVector()));
};


/**
 * optional bytes initialization_vector = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInitializationVector()`
 * @return {!Uint8Array}
 */
proto.quilibrium.node.channel.pb.MessageCiphertext.prototype.getInitializationVector_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getInitializationVector()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.quilibrium.node.channel.pb.MessageCiphertext} returns this
 */
proto.quilibrium.node.channel.pb.MessageCiphertext.prototype.setInitializationVector = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes ciphertext = 2;
 * @return {!(string|Uint8Array)}
 */
proto.quilibrium.node.channel.pb.MessageCiphertext.prototype.getCiphertext = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes ciphertext = 2;
 * This is a type-conversion wrapper around `getCiphertext()`
 * @return {string}
 */
proto.quilibrium.node.channel.pb.MessageCiphertext.prototype.getCiphertext_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCiphertext()));
};


/**
 * optional bytes ciphertext = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCiphertext()`
 * @return {!Uint8Array}
 */
proto.quilibrium.node.channel.pb.MessageCiphertext.prototype.getCiphertext_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCiphertext()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.quilibrium.node.channel.pb.MessageCiphertext} returns this
 */
proto.quilibrium.node.channel.pb.MessageCiphertext.prototype.setCiphertext = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes associated_data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.quilibrium.node.channel.pb.MessageCiphertext.prototype.getAssociatedData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes associated_data = 3;
 * This is a type-conversion wrapper around `getAssociatedData()`
 * @return {string}
 */
proto.quilibrium.node.channel.pb.MessageCiphertext.prototype.getAssociatedData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssociatedData()));
};


/**
 * optional bytes associated_data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssociatedData()`
 * @return {!Uint8Array}
 */
proto.quilibrium.node.channel.pb.MessageCiphertext.prototype.getAssociatedData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssociatedData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.quilibrium.node.channel.pb.MessageCiphertext} returns this
 */
proto.quilibrium.node.channel.pb.MessageCiphertext.prototype.setAssociatedData = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement.oneofGroups_ = [[3]];

/**
 * @enum {number}
 */
proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement.ProvingKeySignatureCase = {
  PROVING_KEY_SIGNATURE_NOT_SET: 0,
  PROVING_KEY_SIGNATURE_ED448: 3
};

/**
 * @return {proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement.ProvingKeySignatureCase}
 */
proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement.prototype.getProvingKeySignatureCase = function() {
  return /** @type {proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement.ProvingKeySignatureCase} */(jspb.Message.computeOneofCase(this, proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement.prototype.toObject = function(opt_includeInstance) {
  return proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement.toObject = function(includeInstance, msg) {
  var f, obj = {
    identityCommitment: msg.getIdentityCommitment_asB64(),
    prekeyCommitment: msg.getPrekeyCommitment_asB64(),
    provingKeySignatureEd448: (f = msg.getProvingKeySignatureEd448()) && keys_pb.Ed448Signature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement}
 */
proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement;
  return proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement}
 */
proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setIdentityCommitment(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPrekeyCommitment(value);
      break;
    case 3:
      var value = new keys_pb.Ed448Signature;
      reader.readMessage(value,keys_pb.Ed448Signature.deserializeBinaryFromReader);
      msg.setProvingKeySignatureEd448(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentityCommitment_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPrekeyCommitment_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getProvingKeySignatureEd448();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      keys_pb.Ed448Signature.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes identity_commitment = 1;
 * @return {!(string|Uint8Array)}
 */
proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement.prototype.getIdentityCommitment = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes identity_commitment = 1;
 * This is a type-conversion wrapper around `getIdentityCommitment()`
 * @return {string}
 */
proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement.prototype.getIdentityCommitment_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getIdentityCommitment()));
};


/**
 * optional bytes identity_commitment = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIdentityCommitment()`
 * @return {!Uint8Array}
 */
proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement.prototype.getIdentityCommitment_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getIdentityCommitment()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement} returns this
 */
proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement.prototype.setIdentityCommitment = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes prekey_commitment = 2;
 * @return {!(string|Uint8Array)}
 */
proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement.prototype.getPrekeyCommitment = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes prekey_commitment = 2;
 * This is a type-conversion wrapper around `getPrekeyCommitment()`
 * @return {string}
 */
proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement.prototype.getPrekeyCommitment_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPrekeyCommitment()));
};


/**
 * optional bytes prekey_commitment = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrekeyCommitment()`
 * @return {!Uint8Array}
 */
proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement.prototype.getPrekeyCommitment_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPrekeyCommitment()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement} returns this
 */
proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement.prototype.setPrekeyCommitment = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional quilibrium.node.keys.pb.Ed448Signature proving_key_signature_ed448 = 3;
 * @return {?proto.quilibrium.node.keys.pb.Ed448Signature}
 */
proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement.prototype.getProvingKeySignatureEd448 = function() {
  return /** @type{?proto.quilibrium.node.keys.pb.Ed448Signature} */ (
    jspb.Message.getWrapperField(this, keys_pb.Ed448Signature, 3));
};


/**
 * @param {?proto.quilibrium.node.keys.pb.Ed448Signature|undefined} value
 * @return {!proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement} returns this
*/
proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement.prototype.setProvingKeySignatureEd448 = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement} returns this
 */
proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement.prototype.clearProvingKeySignatureEd448 = function() {
  return this.setProvingKeySignatureEd448(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quilibrium.node.channel.pb.ProvingKeyAnnouncement.prototype.hasProvingKeySignatureEd448 = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quilibrium.node.channel.pb.ProvingKeyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.quilibrium.node.channel.pb.ProvingKeyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quilibrium.node.channel.pb.ProvingKeyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quilibrium.node.channel.pb.ProvingKeyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    provingKeyBytes: msg.getProvingKeyBytes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quilibrium.node.channel.pb.ProvingKeyRequest}
 */
proto.quilibrium.node.channel.pb.ProvingKeyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quilibrium.node.channel.pb.ProvingKeyRequest;
  return proto.quilibrium.node.channel.pb.ProvingKeyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quilibrium.node.channel.pb.ProvingKeyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quilibrium.node.channel.pb.ProvingKeyRequest}
 */
proto.quilibrium.node.channel.pb.ProvingKeyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProvingKeyBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quilibrium.node.channel.pb.ProvingKeyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quilibrium.node.channel.pb.ProvingKeyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quilibrium.node.channel.pb.ProvingKeyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quilibrium.node.channel.pb.ProvingKeyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProvingKeyBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes proving_key_bytes = 1;
 * @return {!(string|Uint8Array)}
 */
proto.quilibrium.node.channel.pb.ProvingKeyRequest.prototype.getProvingKeyBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes proving_key_bytes = 1;
 * This is a type-conversion wrapper around `getProvingKeyBytes()`
 * @return {string}
 */
proto.quilibrium.node.channel.pb.ProvingKeyRequest.prototype.getProvingKeyBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProvingKeyBytes()));
};


/**
 * optional bytes proving_key_bytes = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProvingKeyBytes()`
 * @return {!Uint8Array}
 */
proto.quilibrium.node.channel.pb.ProvingKeyRequest.prototype.getProvingKeyBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProvingKeyBytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.quilibrium.node.channel.pb.ProvingKeyRequest} returns this
 */
proto.quilibrium.node.channel.pb.ProvingKeyRequest.prototype.setProvingKeyBytes = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.quilibrium.node.channel.pb.InclusionAggregateProof.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quilibrium.node.channel.pb.InclusionAggregateProof.prototype.toObject = function(opt_includeInstance) {
  return proto.quilibrium.node.channel.pb.InclusionAggregateProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quilibrium.node.channel.pb.InclusionAggregateProof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quilibrium.node.channel.pb.InclusionAggregateProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    filter: msg.getFilter_asB64(),
    frameNumber: jspb.Message.getFieldWithDefault(msg, 2, 0),
    inclusionCommitmentsList: jspb.Message.toObjectList(msg.getInclusionCommitmentsList(),
    proto.quilibrium.node.channel.pb.InclusionCommitment.toObject, includeInstance),
    proof: msg.getProof_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quilibrium.node.channel.pb.InclusionAggregateProof}
 */
proto.quilibrium.node.channel.pb.InclusionAggregateProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quilibrium.node.channel.pb.InclusionAggregateProof;
  return proto.quilibrium.node.channel.pb.InclusionAggregateProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quilibrium.node.channel.pb.InclusionAggregateProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quilibrium.node.channel.pb.InclusionAggregateProof}
 */
proto.quilibrium.node.channel.pb.InclusionAggregateProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFilter(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFrameNumber(value);
      break;
    case 3:
      var value = new proto.quilibrium.node.channel.pb.InclusionCommitment;
      reader.readMessage(value,proto.quilibrium.node.channel.pb.InclusionCommitment.deserializeBinaryFromReader);
      msg.addInclusionCommitments(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quilibrium.node.channel.pb.InclusionAggregateProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quilibrium.node.channel.pb.InclusionAggregateProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quilibrium.node.channel.pb.InclusionAggregateProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quilibrium.node.channel.pb.InclusionAggregateProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilter_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getFrameNumber();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getInclusionCommitmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.quilibrium.node.channel.pb.InclusionCommitment.serializeBinaryToWriter
    );
  }
  f = message.getProof_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional bytes filter = 1;
 * @return {!(string|Uint8Array)}
 */
proto.quilibrium.node.channel.pb.InclusionAggregateProof.prototype.getFilter = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes filter = 1;
 * This is a type-conversion wrapper around `getFilter()`
 * @return {string}
 */
proto.quilibrium.node.channel.pb.InclusionAggregateProof.prototype.getFilter_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFilter()));
};


/**
 * optional bytes filter = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFilter()`
 * @return {!Uint8Array}
 */
proto.quilibrium.node.channel.pb.InclusionAggregateProof.prototype.getFilter_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFilter()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.quilibrium.node.channel.pb.InclusionAggregateProof} returns this
 */
proto.quilibrium.node.channel.pb.InclusionAggregateProof.prototype.setFilter = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 frame_number = 2;
 * @return {number}
 */
proto.quilibrium.node.channel.pb.InclusionAggregateProof.prototype.getFrameNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.quilibrium.node.channel.pb.InclusionAggregateProof} returns this
 */
proto.quilibrium.node.channel.pb.InclusionAggregateProof.prototype.setFrameNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated InclusionCommitment inclusion_commitments = 3;
 * @return {!Array<!proto.quilibrium.node.channel.pb.InclusionCommitment>}
 */
proto.quilibrium.node.channel.pb.InclusionAggregateProof.prototype.getInclusionCommitmentsList = function() {
  return /** @type{!Array<!proto.quilibrium.node.channel.pb.InclusionCommitment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.quilibrium.node.channel.pb.InclusionCommitment, 3));
};


/**
 * @param {!Array<!proto.quilibrium.node.channel.pb.InclusionCommitment>} value
 * @return {!proto.quilibrium.node.channel.pb.InclusionAggregateProof} returns this
*/
proto.quilibrium.node.channel.pb.InclusionAggregateProof.prototype.setInclusionCommitmentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.quilibrium.node.channel.pb.InclusionCommitment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.quilibrium.node.channel.pb.InclusionCommitment}
 */
proto.quilibrium.node.channel.pb.InclusionAggregateProof.prototype.addInclusionCommitments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.quilibrium.node.channel.pb.InclusionCommitment, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.quilibrium.node.channel.pb.InclusionAggregateProof} returns this
 */
proto.quilibrium.node.channel.pb.InclusionAggregateProof.prototype.clearInclusionCommitmentsList = function() {
  return this.setInclusionCommitmentsList([]);
};


/**
 * optional bytes proof = 4;
 * @return {!(string|Uint8Array)}
 */
proto.quilibrium.node.channel.pb.InclusionAggregateProof.prototype.getProof = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes proof = 4;
 * This is a type-conversion wrapper around `getProof()`
 * @return {string}
 */
proto.quilibrium.node.channel.pb.InclusionAggregateProof.prototype.getProof_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProof()));
};


/**
 * optional bytes proof = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProof()`
 * @return {!Uint8Array}
 */
proto.quilibrium.node.channel.pb.InclusionAggregateProof.prototype.getProof_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProof()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.quilibrium.node.channel.pb.InclusionAggregateProof} returns this
 */
proto.quilibrium.node.channel.pb.InclusionAggregateProof.prototype.setProof = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quilibrium.node.channel.pb.InclusionCommitment.prototype.toObject = function(opt_includeInstance) {
  return proto.quilibrium.node.channel.pb.InclusionCommitment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quilibrium.node.channel.pb.InclusionCommitment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quilibrium.node.channel.pb.InclusionCommitment.toObject = function(includeInstance, msg) {
  var f, obj = {
    filter: msg.getFilter_asB64(),
    frameNumber: jspb.Message.getFieldWithDefault(msg, 2, 0),
    position: jspb.Message.getFieldWithDefault(msg, 3, 0),
    typeUrl: jspb.Message.getFieldWithDefault(msg, 4, ""),
    data: msg.getData_asB64(),
    commitment: msg.getCommitment_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quilibrium.node.channel.pb.InclusionCommitment}
 */
proto.quilibrium.node.channel.pb.InclusionCommitment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quilibrium.node.channel.pb.InclusionCommitment;
  return proto.quilibrium.node.channel.pb.InclusionCommitment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quilibrium.node.channel.pb.InclusionCommitment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quilibrium.node.channel.pb.InclusionCommitment}
 */
proto.quilibrium.node.channel.pb.InclusionCommitment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFilter(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFrameNumber(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPosition(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTypeUrl(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCommitment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quilibrium.node.channel.pb.InclusionCommitment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quilibrium.node.channel.pb.InclusionCommitment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quilibrium.node.channel.pb.InclusionCommitment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quilibrium.node.channel.pb.InclusionCommitment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilter_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getFrameNumber();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getPosition();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getTypeUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getCommitment_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
};


/**
 * optional bytes filter = 1;
 * @return {!(string|Uint8Array)}
 */
proto.quilibrium.node.channel.pb.InclusionCommitment.prototype.getFilter = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes filter = 1;
 * This is a type-conversion wrapper around `getFilter()`
 * @return {string}
 */
proto.quilibrium.node.channel.pb.InclusionCommitment.prototype.getFilter_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFilter()));
};


/**
 * optional bytes filter = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFilter()`
 * @return {!Uint8Array}
 */
proto.quilibrium.node.channel.pb.InclusionCommitment.prototype.getFilter_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFilter()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.quilibrium.node.channel.pb.InclusionCommitment} returns this
 */
proto.quilibrium.node.channel.pb.InclusionCommitment.prototype.setFilter = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 frame_number = 2;
 * @return {number}
 */
proto.quilibrium.node.channel.pb.InclusionCommitment.prototype.getFrameNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.quilibrium.node.channel.pb.InclusionCommitment} returns this
 */
proto.quilibrium.node.channel.pb.InclusionCommitment.prototype.setFrameNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 position = 3;
 * @return {number}
 */
proto.quilibrium.node.channel.pb.InclusionCommitment.prototype.getPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.quilibrium.node.channel.pb.InclusionCommitment} returns this
 */
proto.quilibrium.node.channel.pb.InclusionCommitment.prototype.setPosition = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string type_url = 4;
 * @return {string}
 */
proto.quilibrium.node.channel.pb.InclusionCommitment.prototype.getTypeUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.quilibrium.node.channel.pb.InclusionCommitment} returns this
 */
proto.quilibrium.node.channel.pb.InclusionCommitment.prototype.setTypeUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bytes data = 5;
 * @return {!(string|Uint8Array)}
 */
proto.quilibrium.node.channel.pb.InclusionCommitment.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes data = 5;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.quilibrium.node.channel.pb.InclusionCommitment.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.quilibrium.node.channel.pb.InclusionCommitment.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.quilibrium.node.channel.pb.InclusionCommitment} returns this
 */
proto.quilibrium.node.channel.pb.InclusionCommitment.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes commitment = 6;
 * @return {!(string|Uint8Array)}
 */
proto.quilibrium.node.channel.pb.InclusionCommitment.prototype.getCommitment = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes commitment = 6;
 * This is a type-conversion wrapper around `getCommitment()`
 * @return {string}
 */
proto.quilibrium.node.channel.pb.InclusionCommitment.prototype.getCommitment_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCommitment()));
};


/**
 * optional bytes commitment = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCommitment()`
 * @return {!Uint8Array}
 */
proto.quilibrium.node.channel.pb.InclusionCommitment.prototype.getCommitment_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCommitment()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.quilibrium.node.channel.pb.InclusionCommitment} returns this
 */
proto.quilibrium.node.channel.pb.InclusionCommitment.prototype.setCommitment = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quilibrium.node.channel.pb.KeyBundleAnnouncement.prototype.toObject = function(opt_includeInstance) {
  return proto.quilibrium.node.channel.pb.KeyBundleAnnouncement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quilibrium.node.channel.pb.KeyBundleAnnouncement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quilibrium.node.channel.pb.KeyBundleAnnouncement.toObject = function(includeInstance, msg) {
  var f, obj = {
    identityKey: (f = msg.getIdentityKey()) && proto.quilibrium.node.channel.pb.IdentityKey.toObject(includeInstance, f),
    signedPreKey: (f = msg.getSignedPreKey()) && proto.quilibrium.node.channel.pb.SignedPreKey.toObject(includeInstance, f),
    provingKeyBytes: msg.getProvingKeyBytes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quilibrium.node.channel.pb.KeyBundleAnnouncement}
 */
proto.quilibrium.node.channel.pb.KeyBundleAnnouncement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quilibrium.node.channel.pb.KeyBundleAnnouncement;
  return proto.quilibrium.node.channel.pb.KeyBundleAnnouncement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quilibrium.node.channel.pb.KeyBundleAnnouncement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quilibrium.node.channel.pb.KeyBundleAnnouncement}
 */
proto.quilibrium.node.channel.pb.KeyBundleAnnouncement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.quilibrium.node.channel.pb.IdentityKey;
      reader.readMessage(value,proto.quilibrium.node.channel.pb.IdentityKey.deserializeBinaryFromReader);
      msg.setIdentityKey(value);
      break;
    case 2:
      var value = new proto.quilibrium.node.channel.pb.SignedPreKey;
      reader.readMessage(value,proto.quilibrium.node.channel.pb.SignedPreKey.deserializeBinaryFromReader);
      msg.setSignedPreKey(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProvingKeyBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quilibrium.node.channel.pb.KeyBundleAnnouncement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quilibrium.node.channel.pb.KeyBundleAnnouncement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quilibrium.node.channel.pb.KeyBundleAnnouncement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quilibrium.node.channel.pb.KeyBundleAnnouncement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentityKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.quilibrium.node.channel.pb.IdentityKey.serializeBinaryToWriter
    );
  }
  f = message.getSignedPreKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.quilibrium.node.channel.pb.SignedPreKey.serializeBinaryToWriter
    );
  }
  f = message.getProvingKeyBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional IdentityKey identity_key = 1;
 * @return {?proto.quilibrium.node.channel.pb.IdentityKey}
 */
proto.quilibrium.node.channel.pb.KeyBundleAnnouncement.prototype.getIdentityKey = function() {
  return /** @type{?proto.quilibrium.node.channel.pb.IdentityKey} */ (
    jspb.Message.getWrapperField(this, proto.quilibrium.node.channel.pb.IdentityKey, 1));
};


/**
 * @param {?proto.quilibrium.node.channel.pb.IdentityKey|undefined} value
 * @return {!proto.quilibrium.node.channel.pb.KeyBundleAnnouncement} returns this
*/
proto.quilibrium.node.channel.pb.KeyBundleAnnouncement.prototype.setIdentityKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quilibrium.node.channel.pb.KeyBundleAnnouncement} returns this
 */
proto.quilibrium.node.channel.pb.KeyBundleAnnouncement.prototype.clearIdentityKey = function() {
  return this.setIdentityKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quilibrium.node.channel.pb.KeyBundleAnnouncement.prototype.hasIdentityKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SignedPreKey signed_pre_key = 2;
 * @return {?proto.quilibrium.node.channel.pb.SignedPreKey}
 */
proto.quilibrium.node.channel.pb.KeyBundleAnnouncement.prototype.getSignedPreKey = function() {
  return /** @type{?proto.quilibrium.node.channel.pb.SignedPreKey} */ (
    jspb.Message.getWrapperField(this, proto.quilibrium.node.channel.pb.SignedPreKey, 2));
};


/**
 * @param {?proto.quilibrium.node.channel.pb.SignedPreKey|undefined} value
 * @return {!proto.quilibrium.node.channel.pb.KeyBundleAnnouncement} returns this
*/
proto.quilibrium.node.channel.pb.KeyBundleAnnouncement.prototype.setSignedPreKey = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quilibrium.node.channel.pb.KeyBundleAnnouncement} returns this
 */
proto.quilibrium.node.channel.pb.KeyBundleAnnouncement.prototype.clearSignedPreKey = function() {
  return this.setSignedPreKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quilibrium.node.channel.pb.KeyBundleAnnouncement.prototype.hasSignedPreKey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes proving_key_bytes = 3;
 * @return {!(string|Uint8Array)}
 */
proto.quilibrium.node.channel.pb.KeyBundleAnnouncement.prototype.getProvingKeyBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes proving_key_bytes = 3;
 * This is a type-conversion wrapper around `getProvingKeyBytes()`
 * @return {string}
 */
proto.quilibrium.node.channel.pb.KeyBundleAnnouncement.prototype.getProvingKeyBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProvingKeyBytes()));
};


/**
 * optional bytes proving_key_bytes = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProvingKeyBytes()`
 * @return {!Uint8Array}
 */
proto.quilibrium.node.channel.pb.KeyBundleAnnouncement.prototype.getProvingKeyBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProvingKeyBytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.quilibrium.node.channel.pb.KeyBundleAnnouncement} returns this
 */
proto.quilibrium.node.channel.pb.KeyBundleAnnouncement.prototype.setProvingKeyBytes = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.quilibrium.node.channel.pb.IdentityKey.oneofGroups_ = [[4]];

/**
 * @enum {number}
 */
proto.quilibrium.node.channel.pb.IdentityKey.IdentityKeySignatureCase = {
  IDENTITY_KEY_SIGNATURE_NOT_SET: 0,
  PUBLIC_KEY_SIGNATURE_ED448: 4
};

/**
 * @return {proto.quilibrium.node.channel.pb.IdentityKey.IdentityKeySignatureCase}
 */
proto.quilibrium.node.channel.pb.IdentityKey.prototype.getIdentityKeySignatureCase = function() {
  return /** @type {proto.quilibrium.node.channel.pb.IdentityKey.IdentityKeySignatureCase} */(jspb.Message.computeOneofCase(this, proto.quilibrium.node.channel.pb.IdentityKey.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quilibrium.node.channel.pb.IdentityKey.prototype.toObject = function(opt_includeInstance) {
  return proto.quilibrium.node.channel.pb.IdentityKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quilibrium.node.channel.pb.IdentityKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quilibrium.node.channel.pb.IdentityKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    challenge: msg.getChallenge_asB64(),
    response: msg.getResponse_asB64(),
    statement: msg.getStatement_asB64(),
    publicKeySignatureEd448: (f = msg.getPublicKeySignatureEd448()) && keys_pb.Ed448Signature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quilibrium.node.channel.pb.IdentityKey}
 */
proto.quilibrium.node.channel.pb.IdentityKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quilibrium.node.channel.pb.IdentityKey;
  return proto.quilibrium.node.channel.pb.IdentityKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quilibrium.node.channel.pb.IdentityKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quilibrium.node.channel.pb.IdentityKey}
 */
proto.quilibrium.node.channel.pb.IdentityKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChallenge(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setResponse(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setStatement(value);
      break;
    case 4:
      var value = new keys_pb.Ed448Signature;
      reader.readMessage(value,keys_pb.Ed448Signature.deserializeBinaryFromReader);
      msg.setPublicKeySignatureEd448(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quilibrium.node.channel.pb.IdentityKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quilibrium.node.channel.pb.IdentityKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quilibrium.node.channel.pb.IdentityKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quilibrium.node.channel.pb.IdentityKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChallenge_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getResponse_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getStatement_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getPublicKeySignatureEd448();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      keys_pb.Ed448Signature.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes challenge = 1;
 * @return {!(string|Uint8Array)}
 */
proto.quilibrium.node.channel.pb.IdentityKey.prototype.getChallenge = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes challenge = 1;
 * This is a type-conversion wrapper around `getChallenge()`
 * @return {string}
 */
proto.quilibrium.node.channel.pb.IdentityKey.prototype.getChallenge_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChallenge()));
};


/**
 * optional bytes challenge = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChallenge()`
 * @return {!Uint8Array}
 */
proto.quilibrium.node.channel.pb.IdentityKey.prototype.getChallenge_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChallenge()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.quilibrium.node.channel.pb.IdentityKey} returns this
 */
proto.quilibrium.node.channel.pb.IdentityKey.prototype.setChallenge = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes response = 2;
 * @return {!(string|Uint8Array)}
 */
proto.quilibrium.node.channel.pb.IdentityKey.prototype.getResponse = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes response = 2;
 * This is a type-conversion wrapper around `getResponse()`
 * @return {string}
 */
proto.quilibrium.node.channel.pb.IdentityKey.prototype.getResponse_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getResponse()));
};


/**
 * optional bytes response = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getResponse()`
 * @return {!Uint8Array}
 */
proto.quilibrium.node.channel.pb.IdentityKey.prototype.getResponse_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getResponse()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.quilibrium.node.channel.pb.IdentityKey} returns this
 */
proto.quilibrium.node.channel.pb.IdentityKey.prototype.setResponse = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes statement = 3;
 * @return {!(string|Uint8Array)}
 */
proto.quilibrium.node.channel.pb.IdentityKey.prototype.getStatement = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes statement = 3;
 * This is a type-conversion wrapper around `getStatement()`
 * @return {string}
 */
proto.quilibrium.node.channel.pb.IdentityKey.prototype.getStatement_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getStatement()));
};


/**
 * optional bytes statement = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStatement()`
 * @return {!Uint8Array}
 */
proto.quilibrium.node.channel.pb.IdentityKey.prototype.getStatement_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getStatement()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.quilibrium.node.channel.pb.IdentityKey} returns this
 */
proto.quilibrium.node.channel.pb.IdentityKey.prototype.setStatement = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional quilibrium.node.keys.pb.Ed448Signature public_key_signature_ed448 = 4;
 * @return {?proto.quilibrium.node.keys.pb.Ed448Signature}
 */
proto.quilibrium.node.channel.pb.IdentityKey.prototype.getPublicKeySignatureEd448 = function() {
  return /** @type{?proto.quilibrium.node.keys.pb.Ed448Signature} */ (
    jspb.Message.getWrapperField(this, keys_pb.Ed448Signature, 4));
};


/**
 * @param {?proto.quilibrium.node.keys.pb.Ed448Signature|undefined} value
 * @return {!proto.quilibrium.node.channel.pb.IdentityKey} returns this
*/
proto.quilibrium.node.channel.pb.IdentityKey.prototype.setPublicKeySignatureEd448 = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.quilibrium.node.channel.pb.IdentityKey.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quilibrium.node.channel.pb.IdentityKey} returns this
 */
proto.quilibrium.node.channel.pb.IdentityKey.prototype.clearPublicKeySignatureEd448 = function() {
  return this.setPublicKeySignatureEd448(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quilibrium.node.channel.pb.IdentityKey.prototype.hasPublicKeySignatureEd448 = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.quilibrium.node.channel.pb.SignedPreKey.oneofGroups_ = [[4]];

/**
 * @enum {number}
 */
proto.quilibrium.node.channel.pb.SignedPreKey.SignedPreKeySignatureCase = {
  SIGNED_PRE_KEY_SIGNATURE_NOT_SET: 0,
  PUBLIC_KEY_SIGNATURE_ED448: 4
};

/**
 * @return {proto.quilibrium.node.channel.pb.SignedPreKey.SignedPreKeySignatureCase}
 */
proto.quilibrium.node.channel.pb.SignedPreKey.prototype.getSignedPreKeySignatureCase = function() {
  return /** @type {proto.quilibrium.node.channel.pb.SignedPreKey.SignedPreKeySignatureCase} */(jspb.Message.computeOneofCase(this, proto.quilibrium.node.channel.pb.SignedPreKey.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quilibrium.node.channel.pb.SignedPreKey.prototype.toObject = function(opt_includeInstance) {
  return proto.quilibrium.node.channel.pb.SignedPreKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quilibrium.node.channel.pb.SignedPreKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quilibrium.node.channel.pb.SignedPreKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    challenge: msg.getChallenge_asB64(),
    response: msg.getResponse_asB64(),
    statement: msg.getStatement_asB64(),
    publicKeySignatureEd448: (f = msg.getPublicKeySignatureEd448()) && keys_pb.Ed448Signature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quilibrium.node.channel.pb.SignedPreKey}
 */
proto.quilibrium.node.channel.pb.SignedPreKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quilibrium.node.channel.pb.SignedPreKey;
  return proto.quilibrium.node.channel.pb.SignedPreKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quilibrium.node.channel.pb.SignedPreKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quilibrium.node.channel.pb.SignedPreKey}
 */
proto.quilibrium.node.channel.pb.SignedPreKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChallenge(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setResponse(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setStatement(value);
      break;
    case 4:
      var value = new keys_pb.Ed448Signature;
      reader.readMessage(value,keys_pb.Ed448Signature.deserializeBinaryFromReader);
      msg.setPublicKeySignatureEd448(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quilibrium.node.channel.pb.SignedPreKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quilibrium.node.channel.pb.SignedPreKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quilibrium.node.channel.pb.SignedPreKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quilibrium.node.channel.pb.SignedPreKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChallenge_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getResponse_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getStatement_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getPublicKeySignatureEd448();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      keys_pb.Ed448Signature.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes challenge = 1;
 * @return {!(string|Uint8Array)}
 */
proto.quilibrium.node.channel.pb.SignedPreKey.prototype.getChallenge = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes challenge = 1;
 * This is a type-conversion wrapper around `getChallenge()`
 * @return {string}
 */
proto.quilibrium.node.channel.pb.SignedPreKey.prototype.getChallenge_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChallenge()));
};


/**
 * optional bytes challenge = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChallenge()`
 * @return {!Uint8Array}
 */
proto.quilibrium.node.channel.pb.SignedPreKey.prototype.getChallenge_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChallenge()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.quilibrium.node.channel.pb.SignedPreKey} returns this
 */
proto.quilibrium.node.channel.pb.SignedPreKey.prototype.setChallenge = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes response = 2;
 * @return {!(string|Uint8Array)}
 */
proto.quilibrium.node.channel.pb.SignedPreKey.prototype.getResponse = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes response = 2;
 * This is a type-conversion wrapper around `getResponse()`
 * @return {string}
 */
proto.quilibrium.node.channel.pb.SignedPreKey.prototype.getResponse_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getResponse()));
};


/**
 * optional bytes response = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getResponse()`
 * @return {!Uint8Array}
 */
proto.quilibrium.node.channel.pb.SignedPreKey.prototype.getResponse_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getResponse()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.quilibrium.node.channel.pb.SignedPreKey} returns this
 */
proto.quilibrium.node.channel.pb.SignedPreKey.prototype.setResponse = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes statement = 3;
 * @return {!(string|Uint8Array)}
 */
proto.quilibrium.node.channel.pb.SignedPreKey.prototype.getStatement = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes statement = 3;
 * This is a type-conversion wrapper around `getStatement()`
 * @return {string}
 */
proto.quilibrium.node.channel.pb.SignedPreKey.prototype.getStatement_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getStatement()));
};


/**
 * optional bytes statement = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStatement()`
 * @return {!Uint8Array}
 */
proto.quilibrium.node.channel.pb.SignedPreKey.prototype.getStatement_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getStatement()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.quilibrium.node.channel.pb.SignedPreKey} returns this
 */
proto.quilibrium.node.channel.pb.SignedPreKey.prototype.setStatement = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional quilibrium.node.keys.pb.Ed448Signature public_key_signature_ed448 = 4;
 * @return {?proto.quilibrium.node.keys.pb.Ed448Signature}
 */
proto.quilibrium.node.channel.pb.SignedPreKey.prototype.getPublicKeySignatureEd448 = function() {
  return /** @type{?proto.quilibrium.node.keys.pb.Ed448Signature} */ (
    jspb.Message.getWrapperField(this, keys_pb.Ed448Signature, 4));
};


/**
 * @param {?proto.quilibrium.node.keys.pb.Ed448Signature|undefined} value
 * @return {!proto.quilibrium.node.channel.pb.SignedPreKey} returns this
*/
proto.quilibrium.node.channel.pb.SignedPreKey.prototype.setPublicKeySignatureEd448 = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.quilibrium.node.channel.pb.SignedPreKey.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quilibrium.node.channel.pb.SignedPreKey} returns this
 */
proto.quilibrium.node.channel.pb.SignedPreKey.prototype.clearPublicKeySignatureEd448 = function() {
  return this.setPublicKeySignatureEd448(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quilibrium.node.channel.pb.SignedPreKey.prototype.hasPublicKeySignatureEd448 = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.quilibrium.node.channel.pb);
