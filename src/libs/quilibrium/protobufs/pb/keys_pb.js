// source: keys.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.quilibrium.node.keys.pb.BLS48581G1PrivateKey', null, global);
goog.exportSymbol('proto.quilibrium.node.keys.pb.BLS48581G1PublicKey', null, global);
goog.exportSymbol('proto.quilibrium.node.keys.pb.BLS48581G2PrivateKey', null, global);
goog.exportSymbol('proto.quilibrium.node.keys.pb.BLS48581G2PublicKey', null, global);
goog.exportSymbol('proto.quilibrium.node.keys.pb.BLS48581Signature', null, global);
goog.exportSymbol('proto.quilibrium.node.keys.pb.Ed448PrivateKey', null, global);
goog.exportSymbol('proto.quilibrium.node.keys.pb.Ed448PublicKey', null, global);
goog.exportSymbol('proto.quilibrium.node.keys.pb.Ed448Signature', null, global);
goog.exportSymbol('proto.quilibrium.node.keys.pb.PCASPrivateKey', null, global);
goog.exportSymbol('proto.quilibrium.node.keys.pb.PCASPublicKey', null, global);
goog.exportSymbol('proto.quilibrium.node.keys.pb.X448PrivateKey', null, global);
goog.exportSymbol('proto.quilibrium.node.keys.pb.X448PublicKey', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quilibrium.node.keys.pb.Ed448PublicKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quilibrium.node.keys.pb.Ed448PublicKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quilibrium.node.keys.pb.Ed448PublicKey.displayName = 'proto.quilibrium.node.keys.pb.Ed448PublicKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quilibrium.node.keys.pb.Ed448PrivateKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quilibrium.node.keys.pb.Ed448PrivateKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quilibrium.node.keys.pb.Ed448PrivateKey.displayName = 'proto.quilibrium.node.keys.pb.Ed448PrivateKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quilibrium.node.keys.pb.Ed448Signature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quilibrium.node.keys.pb.Ed448Signature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quilibrium.node.keys.pb.Ed448Signature.displayName = 'proto.quilibrium.node.keys.pb.Ed448Signature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quilibrium.node.keys.pb.X448PublicKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quilibrium.node.keys.pb.X448PublicKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quilibrium.node.keys.pb.X448PublicKey.displayName = 'proto.quilibrium.node.keys.pb.X448PublicKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quilibrium.node.keys.pb.X448PrivateKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quilibrium.node.keys.pb.X448PrivateKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quilibrium.node.keys.pb.X448PrivateKey.displayName = 'proto.quilibrium.node.keys.pb.X448PrivateKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quilibrium.node.keys.pb.PCASPublicKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quilibrium.node.keys.pb.PCASPublicKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quilibrium.node.keys.pb.PCASPublicKey.displayName = 'proto.quilibrium.node.keys.pb.PCASPublicKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quilibrium.node.keys.pb.PCASPrivateKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quilibrium.node.keys.pb.PCASPrivateKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quilibrium.node.keys.pb.PCASPrivateKey.displayName = 'proto.quilibrium.node.keys.pb.PCASPrivateKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quilibrium.node.keys.pb.BLS48581G1PublicKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quilibrium.node.keys.pb.BLS48581G1PublicKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quilibrium.node.keys.pb.BLS48581G1PublicKey.displayName = 'proto.quilibrium.node.keys.pb.BLS48581G1PublicKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quilibrium.node.keys.pb.BLS48581G1PrivateKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quilibrium.node.keys.pb.BLS48581G1PrivateKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quilibrium.node.keys.pb.BLS48581G1PrivateKey.displayName = 'proto.quilibrium.node.keys.pb.BLS48581G1PrivateKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quilibrium.node.keys.pb.BLS48581G2PublicKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quilibrium.node.keys.pb.BLS48581G2PublicKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quilibrium.node.keys.pb.BLS48581G2PublicKey.displayName = 'proto.quilibrium.node.keys.pb.BLS48581G2PublicKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quilibrium.node.keys.pb.BLS48581G2PrivateKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quilibrium.node.keys.pb.BLS48581G2PrivateKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quilibrium.node.keys.pb.BLS48581G2PrivateKey.displayName = 'proto.quilibrium.node.keys.pb.BLS48581G2PrivateKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quilibrium.node.keys.pb.BLS48581Signature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quilibrium.node.keys.pb.BLS48581Signature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quilibrium.node.keys.pb.BLS48581Signature.displayName = 'proto.quilibrium.node.keys.pb.BLS48581Signature';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quilibrium.node.keys.pb.Ed448PublicKey.prototype.toObject = function(opt_includeInstance) {
  return proto.quilibrium.node.keys.pb.Ed448PublicKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quilibrium.node.keys.pb.Ed448PublicKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quilibrium.node.keys.pb.Ed448PublicKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyValue: msg.getKeyValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quilibrium.node.keys.pb.Ed448PublicKey}
 */
proto.quilibrium.node.keys.pb.Ed448PublicKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quilibrium.node.keys.pb.Ed448PublicKey;
  return proto.quilibrium.node.keys.pb.Ed448PublicKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quilibrium.node.keys.pb.Ed448PublicKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quilibrium.node.keys.pb.Ed448PublicKey}
 */
proto.quilibrium.node.keys.pb.Ed448PublicKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKeyValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quilibrium.node.keys.pb.Ed448PublicKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quilibrium.node.keys.pb.Ed448PublicKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quilibrium.node.keys.pb.Ed448PublicKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quilibrium.node.keys.pb.Ed448PublicKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes key_value = 1;
 * @return {!(string|Uint8Array)}
 */
proto.quilibrium.node.keys.pb.Ed448PublicKey.prototype.getKeyValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes key_value = 1;
 * This is a type-conversion wrapper around `getKeyValue()`
 * @return {string}
 */
proto.quilibrium.node.keys.pb.Ed448PublicKey.prototype.getKeyValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKeyValue()));
};


/**
 * optional bytes key_value = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKeyValue()`
 * @return {!Uint8Array}
 */
proto.quilibrium.node.keys.pb.Ed448PublicKey.prototype.getKeyValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKeyValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.quilibrium.node.keys.pb.Ed448PublicKey} returns this
 */
proto.quilibrium.node.keys.pb.Ed448PublicKey.prototype.setKeyValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quilibrium.node.keys.pb.Ed448PrivateKey.prototype.toObject = function(opt_includeInstance) {
  return proto.quilibrium.node.keys.pb.Ed448PrivateKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quilibrium.node.keys.pb.Ed448PrivateKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quilibrium.node.keys.pb.Ed448PrivateKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyValue: msg.getKeyValue_asB64(),
    publicKey: (f = msg.getPublicKey()) && proto.quilibrium.node.keys.pb.Ed448PublicKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quilibrium.node.keys.pb.Ed448PrivateKey}
 */
proto.quilibrium.node.keys.pb.Ed448PrivateKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quilibrium.node.keys.pb.Ed448PrivateKey;
  return proto.quilibrium.node.keys.pb.Ed448PrivateKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quilibrium.node.keys.pb.Ed448PrivateKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quilibrium.node.keys.pb.Ed448PrivateKey}
 */
proto.quilibrium.node.keys.pb.Ed448PrivateKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKeyValue(value);
      break;
    case 2:
      var value = new proto.quilibrium.node.keys.pb.Ed448PublicKey;
      reader.readMessage(value,proto.quilibrium.node.keys.pb.Ed448PublicKey.deserializeBinaryFromReader);
      msg.setPublicKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quilibrium.node.keys.pb.Ed448PrivateKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quilibrium.node.keys.pb.Ed448PrivateKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quilibrium.node.keys.pb.Ed448PrivateKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quilibrium.node.keys.pb.Ed448PrivateKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPublicKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.quilibrium.node.keys.pb.Ed448PublicKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes key_value = 1;
 * @return {!(string|Uint8Array)}
 */
proto.quilibrium.node.keys.pb.Ed448PrivateKey.prototype.getKeyValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes key_value = 1;
 * This is a type-conversion wrapper around `getKeyValue()`
 * @return {string}
 */
proto.quilibrium.node.keys.pb.Ed448PrivateKey.prototype.getKeyValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKeyValue()));
};


/**
 * optional bytes key_value = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKeyValue()`
 * @return {!Uint8Array}
 */
proto.quilibrium.node.keys.pb.Ed448PrivateKey.prototype.getKeyValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKeyValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.quilibrium.node.keys.pb.Ed448PrivateKey} returns this
 */
proto.quilibrium.node.keys.pb.Ed448PrivateKey.prototype.setKeyValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Ed448PublicKey public_key = 2;
 * @return {?proto.quilibrium.node.keys.pb.Ed448PublicKey}
 */
proto.quilibrium.node.keys.pb.Ed448PrivateKey.prototype.getPublicKey = function() {
  return /** @type{?proto.quilibrium.node.keys.pb.Ed448PublicKey} */ (
    jspb.Message.getWrapperField(this, proto.quilibrium.node.keys.pb.Ed448PublicKey, 2));
};


/**
 * @param {?proto.quilibrium.node.keys.pb.Ed448PublicKey|undefined} value
 * @return {!proto.quilibrium.node.keys.pb.Ed448PrivateKey} returns this
*/
proto.quilibrium.node.keys.pb.Ed448PrivateKey.prototype.setPublicKey = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quilibrium.node.keys.pb.Ed448PrivateKey} returns this
 */
proto.quilibrium.node.keys.pb.Ed448PrivateKey.prototype.clearPublicKey = function() {
  return this.setPublicKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quilibrium.node.keys.pb.Ed448PrivateKey.prototype.hasPublicKey = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quilibrium.node.keys.pb.Ed448Signature.prototype.toObject = function(opt_includeInstance) {
  return proto.quilibrium.node.keys.pb.Ed448Signature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quilibrium.node.keys.pb.Ed448Signature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quilibrium.node.keys.pb.Ed448Signature.toObject = function(includeInstance, msg) {
  var f, obj = {
    signature: msg.getSignature_asB64(),
    publicKey: (f = msg.getPublicKey()) && proto.quilibrium.node.keys.pb.Ed448PublicKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quilibrium.node.keys.pb.Ed448Signature}
 */
proto.quilibrium.node.keys.pb.Ed448Signature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quilibrium.node.keys.pb.Ed448Signature;
  return proto.quilibrium.node.keys.pb.Ed448Signature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quilibrium.node.keys.pb.Ed448Signature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quilibrium.node.keys.pb.Ed448Signature}
 */
proto.quilibrium.node.keys.pb.Ed448Signature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 2:
      var value = new proto.quilibrium.node.keys.pb.Ed448PublicKey;
      reader.readMessage(value,proto.quilibrium.node.keys.pb.Ed448PublicKey.deserializeBinaryFromReader);
      msg.setPublicKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quilibrium.node.keys.pb.Ed448Signature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quilibrium.node.keys.pb.Ed448Signature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quilibrium.node.keys.pb.Ed448Signature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quilibrium.node.keys.pb.Ed448Signature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPublicKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.quilibrium.node.keys.pb.Ed448PublicKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes signature = 1;
 * @return {!(string|Uint8Array)}
 */
proto.quilibrium.node.keys.pb.Ed448Signature.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes signature = 1;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.quilibrium.node.keys.pb.Ed448Signature.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.quilibrium.node.keys.pb.Ed448Signature.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.quilibrium.node.keys.pb.Ed448Signature} returns this
 */
proto.quilibrium.node.keys.pb.Ed448Signature.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Ed448PublicKey public_key = 2;
 * @return {?proto.quilibrium.node.keys.pb.Ed448PublicKey}
 */
proto.quilibrium.node.keys.pb.Ed448Signature.prototype.getPublicKey = function() {
  return /** @type{?proto.quilibrium.node.keys.pb.Ed448PublicKey} */ (
    jspb.Message.getWrapperField(this, proto.quilibrium.node.keys.pb.Ed448PublicKey, 2));
};


/**
 * @param {?proto.quilibrium.node.keys.pb.Ed448PublicKey|undefined} value
 * @return {!proto.quilibrium.node.keys.pb.Ed448Signature} returns this
*/
proto.quilibrium.node.keys.pb.Ed448Signature.prototype.setPublicKey = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quilibrium.node.keys.pb.Ed448Signature} returns this
 */
proto.quilibrium.node.keys.pb.Ed448Signature.prototype.clearPublicKey = function() {
  return this.setPublicKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quilibrium.node.keys.pb.Ed448Signature.prototype.hasPublicKey = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quilibrium.node.keys.pb.X448PublicKey.prototype.toObject = function(opt_includeInstance) {
  return proto.quilibrium.node.keys.pb.X448PublicKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quilibrium.node.keys.pb.X448PublicKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quilibrium.node.keys.pb.X448PublicKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyValue: msg.getKeyValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quilibrium.node.keys.pb.X448PublicKey}
 */
proto.quilibrium.node.keys.pb.X448PublicKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quilibrium.node.keys.pb.X448PublicKey;
  return proto.quilibrium.node.keys.pb.X448PublicKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quilibrium.node.keys.pb.X448PublicKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quilibrium.node.keys.pb.X448PublicKey}
 */
proto.quilibrium.node.keys.pb.X448PublicKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKeyValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quilibrium.node.keys.pb.X448PublicKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quilibrium.node.keys.pb.X448PublicKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quilibrium.node.keys.pb.X448PublicKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quilibrium.node.keys.pb.X448PublicKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes key_value = 1;
 * @return {!(string|Uint8Array)}
 */
proto.quilibrium.node.keys.pb.X448PublicKey.prototype.getKeyValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes key_value = 1;
 * This is a type-conversion wrapper around `getKeyValue()`
 * @return {string}
 */
proto.quilibrium.node.keys.pb.X448PublicKey.prototype.getKeyValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKeyValue()));
};


/**
 * optional bytes key_value = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKeyValue()`
 * @return {!Uint8Array}
 */
proto.quilibrium.node.keys.pb.X448PublicKey.prototype.getKeyValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKeyValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.quilibrium.node.keys.pb.X448PublicKey} returns this
 */
proto.quilibrium.node.keys.pb.X448PublicKey.prototype.setKeyValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quilibrium.node.keys.pb.X448PrivateKey.prototype.toObject = function(opt_includeInstance) {
  return proto.quilibrium.node.keys.pb.X448PrivateKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quilibrium.node.keys.pb.X448PrivateKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quilibrium.node.keys.pb.X448PrivateKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyValue: msg.getKeyValue_asB64(),
    publicKey: (f = msg.getPublicKey()) && proto.quilibrium.node.keys.pb.X448PublicKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quilibrium.node.keys.pb.X448PrivateKey}
 */
proto.quilibrium.node.keys.pb.X448PrivateKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quilibrium.node.keys.pb.X448PrivateKey;
  return proto.quilibrium.node.keys.pb.X448PrivateKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quilibrium.node.keys.pb.X448PrivateKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quilibrium.node.keys.pb.X448PrivateKey}
 */
proto.quilibrium.node.keys.pb.X448PrivateKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKeyValue(value);
      break;
    case 2:
      var value = new proto.quilibrium.node.keys.pb.X448PublicKey;
      reader.readMessage(value,proto.quilibrium.node.keys.pb.X448PublicKey.deserializeBinaryFromReader);
      msg.setPublicKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quilibrium.node.keys.pb.X448PrivateKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quilibrium.node.keys.pb.X448PrivateKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quilibrium.node.keys.pb.X448PrivateKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quilibrium.node.keys.pb.X448PrivateKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPublicKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.quilibrium.node.keys.pb.X448PublicKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes key_value = 1;
 * @return {!(string|Uint8Array)}
 */
proto.quilibrium.node.keys.pb.X448PrivateKey.prototype.getKeyValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes key_value = 1;
 * This is a type-conversion wrapper around `getKeyValue()`
 * @return {string}
 */
proto.quilibrium.node.keys.pb.X448PrivateKey.prototype.getKeyValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKeyValue()));
};


/**
 * optional bytes key_value = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKeyValue()`
 * @return {!Uint8Array}
 */
proto.quilibrium.node.keys.pb.X448PrivateKey.prototype.getKeyValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKeyValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.quilibrium.node.keys.pb.X448PrivateKey} returns this
 */
proto.quilibrium.node.keys.pb.X448PrivateKey.prototype.setKeyValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional X448PublicKey public_key = 2;
 * @return {?proto.quilibrium.node.keys.pb.X448PublicKey}
 */
proto.quilibrium.node.keys.pb.X448PrivateKey.prototype.getPublicKey = function() {
  return /** @type{?proto.quilibrium.node.keys.pb.X448PublicKey} */ (
    jspb.Message.getWrapperField(this, proto.quilibrium.node.keys.pb.X448PublicKey, 2));
};


/**
 * @param {?proto.quilibrium.node.keys.pb.X448PublicKey|undefined} value
 * @return {!proto.quilibrium.node.keys.pb.X448PrivateKey} returns this
*/
proto.quilibrium.node.keys.pb.X448PrivateKey.prototype.setPublicKey = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quilibrium.node.keys.pb.X448PrivateKey} returns this
 */
proto.quilibrium.node.keys.pb.X448PrivateKey.prototype.clearPublicKey = function() {
  return this.setPublicKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quilibrium.node.keys.pb.X448PrivateKey.prototype.hasPublicKey = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quilibrium.node.keys.pb.PCASPublicKey.prototype.toObject = function(opt_includeInstance) {
  return proto.quilibrium.node.keys.pb.PCASPublicKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quilibrium.node.keys.pb.PCASPublicKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quilibrium.node.keys.pb.PCASPublicKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyValue: msg.getKeyValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quilibrium.node.keys.pb.PCASPublicKey}
 */
proto.quilibrium.node.keys.pb.PCASPublicKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quilibrium.node.keys.pb.PCASPublicKey;
  return proto.quilibrium.node.keys.pb.PCASPublicKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quilibrium.node.keys.pb.PCASPublicKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quilibrium.node.keys.pb.PCASPublicKey}
 */
proto.quilibrium.node.keys.pb.PCASPublicKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKeyValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quilibrium.node.keys.pb.PCASPublicKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quilibrium.node.keys.pb.PCASPublicKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quilibrium.node.keys.pb.PCASPublicKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quilibrium.node.keys.pb.PCASPublicKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes key_value = 1;
 * @return {!(string|Uint8Array)}
 */
proto.quilibrium.node.keys.pb.PCASPublicKey.prototype.getKeyValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes key_value = 1;
 * This is a type-conversion wrapper around `getKeyValue()`
 * @return {string}
 */
proto.quilibrium.node.keys.pb.PCASPublicKey.prototype.getKeyValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKeyValue()));
};


/**
 * optional bytes key_value = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKeyValue()`
 * @return {!Uint8Array}
 */
proto.quilibrium.node.keys.pb.PCASPublicKey.prototype.getKeyValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKeyValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.quilibrium.node.keys.pb.PCASPublicKey} returns this
 */
proto.quilibrium.node.keys.pb.PCASPublicKey.prototype.setKeyValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quilibrium.node.keys.pb.PCASPrivateKey.prototype.toObject = function(opt_includeInstance) {
  return proto.quilibrium.node.keys.pb.PCASPrivateKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quilibrium.node.keys.pb.PCASPrivateKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quilibrium.node.keys.pb.PCASPrivateKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyValue: msg.getKeyValue_asB64(),
    publicKey: (f = msg.getPublicKey()) && proto.quilibrium.node.keys.pb.PCASPublicKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quilibrium.node.keys.pb.PCASPrivateKey}
 */
proto.quilibrium.node.keys.pb.PCASPrivateKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quilibrium.node.keys.pb.PCASPrivateKey;
  return proto.quilibrium.node.keys.pb.PCASPrivateKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quilibrium.node.keys.pb.PCASPrivateKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quilibrium.node.keys.pb.PCASPrivateKey}
 */
proto.quilibrium.node.keys.pb.PCASPrivateKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKeyValue(value);
      break;
    case 2:
      var value = new proto.quilibrium.node.keys.pb.PCASPublicKey;
      reader.readMessage(value,proto.quilibrium.node.keys.pb.PCASPublicKey.deserializeBinaryFromReader);
      msg.setPublicKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quilibrium.node.keys.pb.PCASPrivateKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quilibrium.node.keys.pb.PCASPrivateKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quilibrium.node.keys.pb.PCASPrivateKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quilibrium.node.keys.pb.PCASPrivateKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPublicKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.quilibrium.node.keys.pb.PCASPublicKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes key_value = 1;
 * @return {!(string|Uint8Array)}
 */
proto.quilibrium.node.keys.pb.PCASPrivateKey.prototype.getKeyValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes key_value = 1;
 * This is a type-conversion wrapper around `getKeyValue()`
 * @return {string}
 */
proto.quilibrium.node.keys.pb.PCASPrivateKey.prototype.getKeyValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKeyValue()));
};


/**
 * optional bytes key_value = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKeyValue()`
 * @return {!Uint8Array}
 */
proto.quilibrium.node.keys.pb.PCASPrivateKey.prototype.getKeyValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKeyValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.quilibrium.node.keys.pb.PCASPrivateKey} returns this
 */
proto.quilibrium.node.keys.pb.PCASPrivateKey.prototype.setKeyValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional PCASPublicKey public_key = 2;
 * @return {?proto.quilibrium.node.keys.pb.PCASPublicKey}
 */
proto.quilibrium.node.keys.pb.PCASPrivateKey.prototype.getPublicKey = function() {
  return /** @type{?proto.quilibrium.node.keys.pb.PCASPublicKey} */ (
    jspb.Message.getWrapperField(this, proto.quilibrium.node.keys.pb.PCASPublicKey, 2));
};


/**
 * @param {?proto.quilibrium.node.keys.pb.PCASPublicKey|undefined} value
 * @return {!proto.quilibrium.node.keys.pb.PCASPrivateKey} returns this
*/
proto.quilibrium.node.keys.pb.PCASPrivateKey.prototype.setPublicKey = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quilibrium.node.keys.pb.PCASPrivateKey} returns this
 */
proto.quilibrium.node.keys.pb.PCASPrivateKey.prototype.clearPublicKey = function() {
  return this.setPublicKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quilibrium.node.keys.pb.PCASPrivateKey.prototype.hasPublicKey = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quilibrium.node.keys.pb.BLS48581G1PublicKey.prototype.toObject = function(opt_includeInstance) {
  return proto.quilibrium.node.keys.pb.BLS48581G1PublicKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quilibrium.node.keys.pb.BLS48581G1PublicKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quilibrium.node.keys.pb.BLS48581G1PublicKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyValue: msg.getKeyValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quilibrium.node.keys.pb.BLS48581G1PublicKey}
 */
proto.quilibrium.node.keys.pb.BLS48581G1PublicKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quilibrium.node.keys.pb.BLS48581G1PublicKey;
  return proto.quilibrium.node.keys.pb.BLS48581G1PublicKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quilibrium.node.keys.pb.BLS48581G1PublicKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quilibrium.node.keys.pb.BLS48581G1PublicKey}
 */
proto.quilibrium.node.keys.pb.BLS48581G1PublicKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKeyValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quilibrium.node.keys.pb.BLS48581G1PublicKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quilibrium.node.keys.pb.BLS48581G1PublicKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quilibrium.node.keys.pb.BLS48581G1PublicKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quilibrium.node.keys.pb.BLS48581G1PublicKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes key_value = 1;
 * @return {!(string|Uint8Array)}
 */
proto.quilibrium.node.keys.pb.BLS48581G1PublicKey.prototype.getKeyValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes key_value = 1;
 * This is a type-conversion wrapper around `getKeyValue()`
 * @return {string}
 */
proto.quilibrium.node.keys.pb.BLS48581G1PublicKey.prototype.getKeyValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKeyValue()));
};


/**
 * optional bytes key_value = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKeyValue()`
 * @return {!Uint8Array}
 */
proto.quilibrium.node.keys.pb.BLS48581G1PublicKey.prototype.getKeyValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKeyValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.quilibrium.node.keys.pb.BLS48581G1PublicKey} returns this
 */
proto.quilibrium.node.keys.pb.BLS48581G1PublicKey.prototype.setKeyValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quilibrium.node.keys.pb.BLS48581G1PrivateKey.prototype.toObject = function(opt_includeInstance) {
  return proto.quilibrium.node.keys.pb.BLS48581G1PrivateKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quilibrium.node.keys.pb.BLS48581G1PrivateKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quilibrium.node.keys.pb.BLS48581G1PrivateKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyValue: msg.getKeyValue_asB64(),
    publicKey: (f = msg.getPublicKey()) && proto.quilibrium.node.keys.pb.BLS48581G1PublicKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quilibrium.node.keys.pb.BLS48581G1PrivateKey}
 */
proto.quilibrium.node.keys.pb.BLS48581G1PrivateKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quilibrium.node.keys.pb.BLS48581G1PrivateKey;
  return proto.quilibrium.node.keys.pb.BLS48581G1PrivateKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quilibrium.node.keys.pb.BLS48581G1PrivateKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quilibrium.node.keys.pb.BLS48581G1PrivateKey}
 */
proto.quilibrium.node.keys.pb.BLS48581G1PrivateKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKeyValue(value);
      break;
    case 2:
      var value = new proto.quilibrium.node.keys.pb.BLS48581G1PublicKey;
      reader.readMessage(value,proto.quilibrium.node.keys.pb.BLS48581G1PublicKey.deserializeBinaryFromReader);
      msg.setPublicKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quilibrium.node.keys.pb.BLS48581G1PrivateKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quilibrium.node.keys.pb.BLS48581G1PrivateKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quilibrium.node.keys.pb.BLS48581G1PrivateKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quilibrium.node.keys.pb.BLS48581G1PrivateKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPublicKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.quilibrium.node.keys.pb.BLS48581G1PublicKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes key_value = 1;
 * @return {!(string|Uint8Array)}
 */
proto.quilibrium.node.keys.pb.BLS48581G1PrivateKey.prototype.getKeyValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes key_value = 1;
 * This is a type-conversion wrapper around `getKeyValue()`
 * @return {string}
 */
proto.quilibrium.node.keys.pb.BLS48581G1PrivateKey.prototype.getKeyValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKeyValue()));
};


/**
 * optional bytes key_value = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKeyValue()`
 * @return {!Uint8Array}
 */
proto.quilibrium.node.keys.pb.BLS48581G1PrivateKey.prototype.getKeyValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKeyValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.quilibrium.node.keys.pb.BLS48581G1PrivateKey} returns this
 */
proto.quilibrium.node.keys.pb.BLS48581G1PrivateKey.prototype.setKeyValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional BLS48581G1PublicKey public_key = 2;
 * @return {?proto.quilibrium.node.keys.pb.BLS48581G1PublicKey}
 */
proto.quilibrium.node.keys.pb.BLS48581G1PrivateKey.prototype.getPublicKey = function() {
  return /** @type{?proto.quilibrium.node.keys.pb.BLS48581G1PublicKey} */ (
    jspb.Message.getWrapperField(this, proto.quilibrium.node.keys.pb.BLS48581G1PublicKey, 2));
};


/**
 * @param {?proto.quilibrium.node.keys.pb.BLS48581G1PublicKey|undefined} value
 * @return {!proto.quilibrium.node.keys.pb.BLS48581G1PrivateKey} returns this
*/
proto.quilibrium.node.keys.pb.BLS48581G1PrivateKey.prototype.setPublicKey = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quilibrium.node.keys.pb.BLS48581G1PrivateKey} returns this
 */
proto.quilibrium.node.keys.pb.BLS48581G1PrivateKey.prototype.clearPublicKey = function() {
  return this.setPublicKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quilibrium.node.keys.pb.BLS48581G1PrivateKey.prototype.hasPublicKey = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quilibrium.node.keys.pb.BLS48581G2PublicKey.prototype.toObject = function(opt_includeInstance) {
  return proto.quilibrium.node.keys.pb.BLS48581G2PublicKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quilibrium.node.keys.pb.BLS48581G2PublicKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quilibrium.node.keys.pb.BLS48581G2PublicKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyValue: msg.getKeyValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quilibrium.node.keys.pb.BLS48581G2PublicKey}
 */
proto.quilibrium.node.keys.pb.BLS48581G2PublicKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quilibrium.node.keys.pb.BLS48581G2PublicKey;
  return proto.quilibrium.node.keys.pb.BLS48581G2PublicKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quilibrium.node.keys.pb.BLS48581G2PublicKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quilibrium.node.keys.pb.BLS48581G2PublicKey}
 */
proto.quilibrium.node.keys.pb.BLS48581G2PublicKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKeyValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quilibrium.node.keys.pb.BLS48581G2PublicKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quilibrium.node.keys.pb.BLS48581G2PublicKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quilibrium.node.keys.pb.BLS48581G2PublicKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quilibrium.node.keys.pb.BLS48581G2PublicKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes key_value = 1;
 * @return {!(string|Uint8Array)}
 */
proto.quilibrium.node.keys.pb.BLS48581G2PublicKey.prototype.getKeyValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes key_value = 1;
 * This is a type-conversion wrapper around `getKeyValue()`
 * @return {string}
 */
proto.quilibrium.node.keys.pb.BLS48581G2PublicKey.prototype.getKeyValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKeyValue()));
};


/**
 * optional bytes key_value = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKeyValue()`
 * @return {!Uint8Array}
 */
proto.quilibrium.node.keys.pb.BLS48581G2PublicKey.prototype.getKeyValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKeyValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.quilibrium.node.keys.pb.BLS48581G2PublicKey} returns this
 */
proto.quilibrium.node.keys.pb.BLS48581G2PublicKey.prototype.setKeyValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quilibrium.node.keys.pb.BLS48581G2PrivateKey.prototype.toObject = function(opt_includeInstance) {
  return proto.quilibrium.node.keys.pb.BLS48581G2PrivateKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quilibrium.node.keys.pb.BLS48581G2PrivateKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quilibrium.node.keys.pb.BLS48581G2PrivateKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyValue: msg.getKeyValue_asB64(),
    publicKey: (f = msg.getPublicKey()) && proto.quilibrium.node.keys.pb.BLS48581G2PublicKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quilibrium.node.keys.pb.BLS48581G2PrivateKey}
 */
proto.quilibrium.node.keys.pb.BLS48581G2PrivateKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quilibrium.node.keys.pb.BLS48581G2PrivateKey;
  return proto.quilibrium.node.keys.pb.BLS48581G2PrivateKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quilibrium.node.keys.pb.BLS48581G2PrivateKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quilibrium.node.keys.pb.BLS48581G2PrivateKey}
 */
proto.quilibrium.node.keys.pb.BLS48581G2PrivateKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKeyValue(value);
      break;
    case 2:
      var value = new proto.quilibrium.node.keys.pb.BLS48581G2PublicKey;
      reader.readMessage(value,proto.quilibrium.node.keys.pb.BLS48581G2PublicKey.deserializeBinaryFromReader);
      msg.setPublicKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quilibrium.node.keys.pb.BLS48581G2PrivateKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quilibrium.node.keys.pb.BLS48581G2PrivateKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quilibrium.node.keys.pb.BLS48581G2PrivateKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quilibrium.node.keys.pb.BLS48581G2PrivateKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPublicKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.quilibrium.node.keys.pb.BLS48581G2PublicKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes key_value = 1;
 * @return {!(string|Uint8Array)}
 */
proto.quilibrium.node.keys.pb.BLS48581G2PrivateKey.prototype.getKeyValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes key_value = 1;
 * This is a type-conversion wrapper around `getKeyValue()`
 * @return {string}
 */
proto.quilibrium.node.keys.pb.BLS48581G2PrivateKey.prototype.getKeyValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKeyValue()));
};


/**
 * optional bytes key_value = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKeyValue()`
 * @return {!Uint8Array}
 */
proto.quilibrium.node.keys.pb.BLS48581G2PrivateKey.prototype.getKeyValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKeyValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.quilibrium.node.keys.pb.BLS48581G2PrivateKey} returns this
 */
proto.quilibrium.node.keys.pb.BLS48581G2PrivateKey.prototype.setKeyValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional BLS48581G2PublicKey public_key = 2;
 * @return {?proto.quilibrium.node.keys.pb.BLS48581G2PublicKey}
 */
proto.quilibrium.node.keys.pb.BLS48581G2PrivateKey.prototype.getPublicKey = function() {
  return /** @type{?proto.quilibrium.node.keys.pb.BLS48581G2PublicKey} */ (
    jspb.Message.getWrapperField(this, proto.quilibrium.node.keys.pb.BLS48581G2PublicKey, 2));
};


/**
 * @param {?proto.quilibrium.node.keys.pb.BLS48581G2PublicKey|undefined} value
 * @return {!proto.quilibrium.node.keys.pb.BLS48581G2PrivateKey} returns this
*/
proto.quilibrium.node.keys.pb.BLS48581G2PrivateKey.prototype.setPublicKey = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quilibrium.node.keys.pb.BLS48581G2PrivateKey} returns this
 */
proto.quilibrium.node.keys.pb.BLS48581G2PrivateKey.prototype.clearPublicKey = function() {
  return this.setPublicKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quilibrium.node.keys.pb.BLS48581G2PrivateKey.prototype.hasPublicKey = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quilibrium.node.keys.pb.BLS48581Signature.prototype.toObject = function(opt_includeInstance) {
  return proto.quilibrium.node.keys.pb.BLS48581Signature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quilibrium.node.keys.pb.BLS48581Signature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quilibrium.node.keys.pb.BLS48581Signature.toObject = function(includeInstance, msg) {
  var f, obj = {
    signature: msg.getSignature_asB64(),
    publicKey: (f = msg.getPublicKey()) && proto.quilibrium.node.keys.pb.BLS48581G2PublicKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quilibrium.node.keys.pb.BLS48581Signature}
 */
proto.quilibrium.node.keys.pb.BLS48581Signature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quilibrium.node.keys.pb.BLS48581Signature;
  return proto.quilibrium.node.keys.pb.BLS48581Signature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quilibrium.node.keys.pb.BLS48581Signature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quilibrium.node.keys.pb.BLS48581Signature}
 */
proto.quilibrium.node.keys.pb.BLS48581Signature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 2:
      var value = new proto.quilibrium.node.keys.pb.BLS48581G2PublicKey;
      reader.readMessage(value,proto.quilibrium.node.keys.pb.BLS48581G2PublicKey.deserializeBinaryFromReader);
      msg.setPublicKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quilibrium.node.keys.pb.BLS48581Signature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quilibrium.node.keys.pb.BLS48581Signature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quilibrium.node.keys.pb.BLS48581Signature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quilibrium.node.keys.pb.BLS48581Signature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPublicKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.quilibrium.node.keys.pb.BLS48581G2PublicKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes signature = 1;
 * @return {!(string|Uint8Array)}
 */
proto.quilibrium.node.keys.pb.BLS48581Signature.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes signature = 1;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.quilibrium.node.keys.pb.BLS48581Signature.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.quilibrium.node.keys.pb.BLS48581Signature.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.quilibrium.node.keys.pb.BLS48581Signature} returns this
 */
proto.quilibrium.node.keys.pb.BLS48581Signature.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional BLS48581G2PublicKey public_key = 2;
 * @return {?proto.quilibrium.node.keys.pb.BLS48581G2PublicKey}
 */
proto.quilibrium.node.keys.pb.BLS48581Signature.prototype.getPublicKey = function() {
  return /** @type{?proto.quilibrium.node.keys.pb.BLS48581G2PublicKey} */ (
    jspb.Message.getWrapperField(this, proto.quilibrium.node.keys.pb.BLS48581G2PublicKey, 2));
};


/**
 * @param {?proto.quilibrium.node.keys.pb.BLS48581G2PublicKey|undefined} value
 * @return {!proto.quilibrium.node.keys.pb.BLS48581Signature} returns this
*/
proto.quilibrium.node.keys.pb.BLS48581Signature.prototype.setPublicKey = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quilibrium.node.keys.pb.BLS48581Signature} returns this
 */
proto.quilibrium.node.keys.pb.BLS48581Signature.prototype.clearPublicKey = function() {
  return this.setPublicKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quilibrium.node.keys.pb.BLS48581Signature.prototype.hasPublicKey = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.quilibrium.node.keys.pb);
