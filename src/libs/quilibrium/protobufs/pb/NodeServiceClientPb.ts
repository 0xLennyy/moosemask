/**
 * @fileoverview gRPC-Web generated client stub for quilibrium.node.node.pb
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.20.3
// source: node.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as node_pb from './node_pb'; // proto import: "node.proto"


export class ValidationServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorPerformValidation = new grpcWeb.MethodDescriptor(
    '/quilibrium.node.node.pb.ValidationService/PerformValidation',
    grpcWeb.MethodType.UNARY,
    node_pb.ValidationMessage,
    node_pb.ValidationMessage,
    (request: node_pb.ValidationMessage) => {
      return request.serializeBinary();
    },
    node_pb.ValidationMessage.deserializeBinary
  );

  performValidation(
    request: node_pb.ValidationMessage,
    metadata?: grpcWeb.Metadata | null): Promise<node_pb.ValidationMessage>;

  performValidation(
    request: node_pb.ValidationMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: node_pb.ValidationMessage) => void): grpcWeb.ClientReadableStream<node_pb.ValidationMessage>;

  performValidation(
    request: node_pb.ValidationMessage,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: node_pb.ValidationMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quilibrium.node.node.pb.ValidationService/PerformValidation',
        request,
        metadata || {},
        this.methodDescriptorPerformValidation,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quilibrium.node.node.pb.ValidationService/PerformValidation',
    request,
    metadata || {},
    this.methodDescriptorPerformValidation);
  }

  methodDescriptorSync = new grpcWeb.MethodDescriptor(
    '/quilibrium.node.node.pb.ValidationService/Sync',
    grpcWeb.MethodType.SERVER_STREAMING,
    node_pb.SyncRequest,
    node_pb.SyncResponse,
    (request: node_pb.SyncRequest) => {
      return request.serializeBinary();
    },
    node_pb.SyncResponse.deserializeBinary
  );

  sync(
    request: node_pb.SyncRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<node_pb.SyncResponse> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/quilibrium.node.node.pb.ValidationService/Sync',
      request,
      metadata || {},
      this.methodDescriptorSync);
  }

}

export class NodeServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetFrames = new grpcWeb.MethodDescriptor(
    '/quilibrium.node.node.pb.NodeService/GetFrames',
    grpcWeb.MethodType.UNARY,
    node_pb.GetFramesRequest,
    node_pb.FramesResponse,
    (request: node_pb.GetFramesRequest) => {
      return request.serializeBinary();
    },
    node_pb.FramesResponse.deserializeBinary
  );

  getFrames(
    request: node_pb.GetFramesRequest,
    metadata?: grpcWeb.Metadata | null): Promise<node_pb.FramesResponse>;

  getFrames(
    request: node_pb.GetFramesRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: node_pb.FramesResponse) => void): grpcWeb.ClientReadableStream<node_pb.FramesResponse>;

  getFrames(
    request: node_pb.GetFramesRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: node_pb.FramesResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quilibrium.node.node.pb.NodeService/GetFrames',
        request,
        metadata || {},
        this.methodDescriptorGetFrames,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quilibrium.node.node.pb.NodeService/GetFrames',
    request,
    metadata || {},
    this.methodDescriptorGetFrames);
  }

  methodDescriptorGetFrameInfo = new grpcWeb.MethodDescriptor(
    '/quilibrium.node.node.pb.NodeService/GetFrameInfo',
    grpcWeb.MethodType.UNARY,
    node_pb.GetFrameInfoRequest,
    node_pb.FrameInfoResponse,
    (request: node_pb.GetFrameInfoRequest) => {
      return request.serializeBinary();
    },
    node_pb.FrameInfoResponse.deserializeBinary
  );

  getFrameInfo(
    request: node_pb.GetFrameInfoRequest,
    metadata?: grpcWeb.Metadata | null): Promise<node_pb.FrameInfoResponse>;

  getFrameInfo(
    request: node_pb.GetFrameInfoRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: node_pb.FrameInfoResponse) => void): grpcWeb.ClientReadableStream<node_pb.FrameInfoResponse>;

  getFrameInfo(
    request: node_pb.GetFrameInfoRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: node_pb.FrameInfoResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quilibrium.node.node.pb.NodeService/GetFrameInfo',
        request,
        metadata || {},
        this.methodDescriptorGetFrameInfo,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quilibrium.node.node.pb.NodeService/GetFrameInfo',
    request,
    metadata || {},
    this.methodDescriptorGetFrameInfo);
  }

  methodDescriptorGetPeerInfo = new grpcWeb.MethodDescriptor(
    '/quilibrium.node.node.pb.NodeService/GetPeerInfo',
    grpcWeb.MethodType.UNARY,
    node_pb.GetPeerInfoRequest,
    node_pb.PeerInfoResponse,
    (request: node_pb.GetPeerInfoRequest) => {
      return request.serializeBinary();
    },
    node_pb.PeerInfoResponse.deserializeBinary
  );

  getPeerInfo(
    request: node_pb.GetPeerInfoRequest,
    metadata?: grpcWeb.Metadata | null): Promise<node_pb.PeerInfoResponse>;

  getPeerInfo(
    request: node_pb.GetPeerInfoRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: node_pb.PeerInfoResponse) => void): grpcWeb.ClientReadableStream<node_pb.PeerInfoResponse>;

  getPeerInfo(
    request: node_pb.GetPeerInfoRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: node_pb.PeerInfoResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quilibrium.node.node.pb.NodeService/GetPeerInfo',
        request,
        metadata || {},
        this.methodDescriptorGetPeerInfo,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quilibrium.node.node.pb.NodeService/GetPeerInfo',
    request,
    metadata || {},
    this.methodDescriptorGetPeerInfo);
  }

  methodDescriptorGetNodeInfo = new grpcWeb.MethodDescriptor(
    '/quilibrium.node.node.pb.NodeService/GetNodeInfo',
    grpcWeb.MethodType.UNARY,
    node_pb.GetNodeInfoRequest,
    node_pb.NodeInfoResponse,
    (request: node_pb.GetNodeInfoRequest) => {
      return request.serializeBinary();
    },
    node_pb.NodeInfoResponse.deserializeBinary
  );

  getNodeInfo(
    request: node_pb.GetNodeInfoRequest,
    metadata?: grpcWeb.Metadata | null): Promise<node_pb.NodeInfoResponse>;

  getNodeInfo(
    request: node_pb.GetNodeInfoRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: node_pb.NodeInfoResponse) => void): grpcWeb.ClientReadableStream<node_pb.NodeInfoResponse>;

  getNodeInfo(
    request: node_pb.GetNodeInfoRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: node_pb.NodeInfoResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quilibrium.node.node.pb.NodeService/GetNodeInfo',
        request,
        metadata || {},
        this.methodDescriptorGetNodeInfo,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quilibrium.node.node.pb.NodeService/GetNodeInfo',
    request,
    metadata || {},
    this.methodDescriptorGetNodeInfo);
  }

  methodDescriptorGetNetworkInfo = new grpcWeb.MethodDescriptor(
    '/quilibrium.node.node.pb.NodeService/GetNetworkInfo',
    grpcWeb.MethodType.UNARY,
    node_pb.GetNetworkInfoRequest,
    node_pb.NetworkInfoResponse,
    (request: node_pb.GetNetworkInfoRequest) => {
      return request.serializeBinary();
    },
    node_pb.NetworkInfoResponse.deserializeBinary
  );

  getNetworkInfo(
    request: node_pb.GetNetworkInfoRequest,
    metadata?: grpcWeb.Metadata | null): Promise<node_pb.NetworkInfoResponse>;

  getNetworkInfo(
    request: node_pb.GetNetworkInfoRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: node_pb.NetworkInfoResponse) => void): grpcWeb.ClientReadableStream<node_pb.NetworkInfoResponse>;

  getNetworkInfo(
    request: node_pb.GetNetworkInfoRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: node_pb.NetworkInfoResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quilibrium.node.node.pb.NodeService/GetNetworkInfo',
        request,
        metadata || {},
        this.methodDescriptorGetNetworkInfo,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quilibrium.node.node.pb.NodeService/GetNetworkInfo',
    request,
    metadata || {},
    this.methodDescriptorGetNetworkInfo);
  }

  methodDescriptorGetTokenInfo = new grpcWeb.MethodDescriptor(
    '/quilibrium.node.node.pb.NodeService/GetTokenInfo',
    grpcWeb.MethodType.UNARY,
    node_pb.GetTokenInfoRequest,
    node_pb.TokenInfoResponse,
    (request: node_pb.GetTokenInfoRequest) => {
      return request.serializeBinary();
    },
    node_pb.TokenInfoResponse.deserializeBinary
  );

  getTokenInfo(
    request: node_pb.GetTokenInfoRequest,
    metadata?: grpcWeb.Metadata | null): Promise<node_pb.TokenInfoResponse>;

  getTokenInfo(
    request: node_pb.GetTokenInfoRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: node_pb.TokenInfoResponse) => void): grpcWeb.ClientReadableStream<node_pb.TokenInfoResponse>;

  getTokenInfo(
    request: node_pb.GetTokenInfoRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: node_pb.TokenInfoResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quilibrium.node.node.pb.NodeService/GetTokenInfo',
        request,
        metadata || {},
        this.methodDescriptorGetTokenInfo,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quilibrium.node.node.pb.NodeService/GetTokenInfo',
    request,
    metadata || {},
    this.methodDescriptorGetTokenInfo);
  }

  methodDescriptorGetPeerManifests = new grpcWeb.MethodDescriptor(
    '/quilibrium.node.node.pb.NodeService/GetPeerManifests',
    grpcWeb.MethodType.UNARY,
    node_pb.GetPeerManifestsRequest,
    node_pb.PeerManifestsResponse,
    (request: node_pb.GetPeerManifestsRequest) => {
      return request.serializeBinary();
    },
    node_pb.PeerManifestsResponse.deserializeBinary
  );

  getPeerManifests(
    request: node_pb.GetPeerManifestsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<node_pb.PeerManifestsResponse>;

  getPeerManifests(
    request: node_pb.GetPeerManifestsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: node_pb.PeerManifestsResponse) => void): grpcWeb.ClientReadableStream<node_pb.PeerManifestsResponse>;

  getPeerManifests(
    request: node_pb.GetPeerManifestsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: node_pb.PeerManifestsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quilibrium.node.node.pb.NodeService/GetPeerManifests',
        request,
        metadata || {},
        this.methodDescriptorGetPeerManifests,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quilibrium.node.node.pb.NodeService/GetPeerManifests',
    request,
    metadata || {},
    this.methodDescriptorGetPeerManifests);
  }

  methodDescriptorSendMessage = new grpcWeb.MethodDescriptor(
    '/quilibrium.node.node.pb.NodeService/SendMessage',
    grpcWeb.MethodType.UNARY,
    node_pb.TokenRequest,
    node_pb.SendMessageResponse,
    (request: node_pb.TokenRequest) => {
      return request.serializeBinary();
    },
    node_pb.SendMessageResponse.deserializeBinary
  );

  sendMessage(
    request: node_pb.TokenRequest,
    metadata?: grpcWeb.Metadata | null): Promise<node_pb.SendMessageResponse>;

  sendMessage(
    request: node_pb.TokenRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: node_pb.SendMessageResponse) => void): grpcWeb.ClientReadableStream<node_pb.SendMessageResponse>;

  sendMessage(
    request: node_pb.TokenRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: node_pb.SendMessageResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quilibrium.node.node.pb.NodeService/SendMessage',
        request,
        metadata || {},
        this.methodDescriptorSendMessage,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quilibrium.node.node.pb.NodeService/SendMessage',
    request,
    metadata || {},
    this.methodDescriptorSendMessage);
  }

  methodDescriptorGetTokensByAccount = new grpcWeb.MethodDescriptor(
    '/quilibrium.node.node.pb.NodeService/GetTokensByAccount',
    grpcWeb.MethodType.UNARY,
    node_pb.GetTokensByAccountRequest,
    node_pb.TokensByAccountResponse,
    (request: node_pb.GetTokensByAccountRequest) => {
      return request.serializeBinary();
    },
    node_pb.TokensByAccountResponse.deserializeBinary
  );

  getTokensByAccount(
    request: node_pb.GetTokensByAccountRequest,
    metadata?: grpcWeb.Metadata | null): Promise<node_pb.TokensByAccountResponse>;

  getTokensByAccount(
    request: node_pb.GetTokensByAccountRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: node_pb.TokensByAccountResponse) => void): grpcWeb.ClientReadableStream<node_pb.TokensByAccountResponse>;

  getTokensByAccount(
    request: node_pb.GetTokensByAccountRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: node_pb.TokensByAccountResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quilibrium.node.node.pb.NodeService/GetTokensByAccount',
        request,
        metadata || {},
        this.methodDescriptorGetTokensByAccount,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quilibrium.node.node.pb.NodeService/GetTokensByAccount',
    request,
    metadata || {},
    this.methodDescriptorGetTokensByAccount);
  }

  methodDescriptorGetPreCoinProofsByAccount = new grpcWeb.MethodDescriptor(
    '/quilibrium.node.node.pb.NodeService/GetPreCoinProofsByAccount',
    grpcWeb.MethodType.UNARY,
    node_pb.GetPreCoinProofsByAccountRequest,
    node_pb.PreCoinProofsByAccountResponse,
    (request: node_pb.GetPreCoinProofsByAccountRequest) => {
      return request.serializeBinary();
    },
    node_pb.PreCoinProofsByAccountResponse.deserializeBinary
  );

  getPreCoinProofsByAccount(
    request: node_pb.GetPreCoinProofsByAccountRequest,
    metadata?: grpcWeb.Metadata | null): Promise<node_pb.PreCoinProofsByAccountResponse>;

  getPreCoinProofsByAccount(
    request: node_pb.GetPreCoinProofsByAccountRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: node_pb.PreCoinProofsByAccountResponse) => void): grpcWeb.ClientReadableStream<node_pb.PreCoinProofsByAccountResponse>;

  getPreCoinProofsByAccount(
    request: node_pb.GetPreCoinProofsByAccountRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: node_pb.PreCoinProofsByAccountResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quilibrium.node.node.pb.NodeService/GetPreCoinProofsByAccount',
        request,
        metadata || {},
        this.methodDescriptorGetPreCoinProofsByAccount,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quilibrium.node.node.pb.NodeService/GetPreCoinProofsByAccount',
    request,
    metadata || {},
    this.methodDescriptorGetPreCoinProofsByAccount);
  }

}

export class AccountServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorAllow = new grpcWeb.MethodDescriptor(
    '/quilibrium.node.node.pb.AccountService/Allow',
    grpcWeb.MethodType.UNARY,
    node_pb.DecryptableAllowAccountRequest,
    node_pb.AllowAccountResponse,
    (request: node_pb.DecryptableAllowAccountRequest) => {
      return request.serializeBinary();
    },
    node_pb.AllowAccountResponse.deserializeBinary
  );

  allow(
    request: node_pb.DecryptableAllowAccountRequest,
    metadata?: grpcWeb.Metadata | null): Promise<node_pb.AllowAccountResponse>;

  allow(
    request: node_pb.DecryptableAllowAccountRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: node_pb.AllowAccountResponse) => void): grpcWeb.ClientReadableStream<node_pb.AllowAccountResponse>;

  allow(
    request: node_pb.DecryptableAllowAccountRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: node_pb.AllowAccountResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quilibrium.node.node.pb.AccountService/Allow',
        request,
        metadata || {},
        this.methodDescriptorAllow,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quilibrium.node.node.pb.AccountService/Allow',
    request,
    metadata || {},
    this.methodDescriptorAllow);
  }

  methodDescriptorGetBalance = new grpcWeb.MethodDescriptor(
    '/quilibrium.node.node.pb.AccountService/GetBalance',
    grpcWeb.MethodType.UNARY,
    node_pb.DecryptableBalanceAccountRequest,
    node_pb.BalanceAccountResponse,
    (request: node_pb.DecryptableBalanceAccountRequest) => {
      return request.serializeBinary();
    },
    node_pb.BalanceAccountResponse.deserializeBinary
  );

  getBalance(
    request: node_pb.DecryptableBalanceAccountRequest,
    metadata?: grpcWeb.Metadata | null): Promise<node_pb.BalanceAccountResponse>;

  getBalance(
    request: node_pb.DecryptableBalanceAccountRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: node_pb.BalanceAccountResponse) => void): grpcWeb.ClientReadableStream<node_pb.BalanceAccountResponse>;

  getBalance(
    request: node_pb.DecryptableBalanceAccountRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: node_pb.BalanceAccountResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quilibrium.node.node.pb.AccountService/GetBalance',
        request,
        metadata || {},
        this.methodDescriptorGetBalance,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quilibrium.node.node.pb.AccountService/GetBalance',
    request,
    metadata || {},
    this.methodDescriptorGetBalance);
  }

  methodDescriptorListCoins = new grpcWeb.MethodDescriptor(
    '/quilibrium.node.node.pb.AccountService/ListCoins',
    grpcWeb.MethodType.UNARY,
    node_pb.DecryptableCoinsAccountRequest,
    node_pb.CoinsAccountResponse,
    (request: node_pb.DecryptableCoinsAccountRequest) => {
      return request.serializeBinary();
    },
    node_pb.CoinsAccountResponse.deserializeBinary
  );

  listCoins(
    request: node_pb.DecryptableCoinsAccountRequest,
    metadata?: grpcWeb.Metadata | null): Promise<node_pb.CoinsAccountResponse>;

  listCoins(
    request: node_pb.DecryptableCoinsAccountRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: node_pb.CoinsAccountResponse) => void): grpcWeb.ClientReadableStream<node_pb.CoinsAccountResponse>;

  listCoins(
    request: node_pb.DecryptableCoinsAccountRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: node_pb.CoinsAccountResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quilibrium.node.node.pb.AccountService/ListCoins',
        request,
        metadata || {},
        this.methodDescriptorListCoins,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quilibrium.node.node.pb.AccountService/ListCoins',
    request,
    metadata || {},
    this.methodDescriptorListCoins);
  }

  methodDescriptorListPendingTransactions = new grpcWeb.MethodDescriptor(
    '/quilibrium.node.node.pb.AccountService/ListPendingTransactions',
    grpcWeb.MethodType.UNARY,
    node_pb.DecryptablePendingTransactionsAccountRequest,
    node_pb.PendingTransactionsAccountResponse,
    (request: node_pb.DecryptablePendingTransactionsAccountRequest) => {
      return request.serializeBinary();
    },
    node_pb.PendingTransactionsAccountResponse.deserializeBinary
  );

  listPendingTransactions(
    request: node_pb.DecryptablePendingTransactionsAccountRequest,
    metadata?: grpcWeb.Metadata | null): Promise<node_pb.PendingTransactionsAccountResponse>;

  listPendingTransactions(
    request: node_pb.DecryptablePendingTransactionsAccountRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: node_pb.PendingTransactionsAccountResponse) => void): grpcWeb.ClientReadableStream<node_pb.PendingTransactionsAccountResponse>;

  listPendingTransactions(
    request: node_pb.DecryptablePendingTransactionsAccountRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: node_pb.PendingTransactionsAccountResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quilibrium.node.node.pb.AccountService/ListPendingTransactions',
        request,
        metadata || {},
        this.methodDescriptorListPendingTransactions,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quilibrium.node.node.pb.AccountService/ListPendingTransactions',
    request,
    metadata || {},
    this.methodDescriptorListPendingTransactions);
  }

  methodDescriptorRevoke = new grpcWeb.MethodDescriptor(
    '/quilibrium.node.node.pb.AccountService/Revoke',
    grpcWeb.MethodType.UNARY,
    node_pb.DecryptableRevokeAccountRequest,
    node_pb.RevokeAccountResponse,
    (request: node_pb.DecryptableRevokeAccountRequest) => {
      return request.serializeBinary();
    },
    node_pb.RevokeAccountResponse.deserializeBinary
  );

  revoke(
    request: node_pb.DecryptableRevokeAccountRequest,
    metadata?: grpcWeb.Metadata | null): Promise<node_pb.RevokeAccountResponse>;

  revoke(
    request: node_pb.DecryptableRevokeAccountRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: node_pb.RevokeAccountResponse) => void): grpcWeb.ClientReadableStream<node_pb.RevokeAccountResponse>;

  revoke(
    request: node_pb.DecryptableRevokeAccountRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: node_pb.RevokeAccountResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quilibrium.node.node.pb.AccountService/Revoke',
        request,
        metadata || {},
        this.methodDescriptorRevoke,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quilibrium.node.node.pb.AccountService/Revoke',
    request,
    metadata || {},
    this.methodDescriptorRevoke);
  }

}

export class CoinServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorAllow = new grpcWeb.MethodDescriptor(
    '/quilibrium.node.node.pb.CoinService/Allow',
    grpcWeb.MethodType.UNARY,
    node_pb.DecryptableAllowCoinRequest,
    node_pb.AllowCoinResponse,
    (request: node_pb.DecryptableAllowCoinRequest) => {
      return request.serializeBinary();
    },
    node_pb.AllowCoinResponse.deserializeBinary
  );

  allow(
    request: node_pb.DecryptableAllowCoinRequest,
    metadata?: grpcWeb.Metadata | null): Promise<node_pb.AllowCoinResponse>;

  allow(
    request: node_pb.DecryptableAllowCoinRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: node_pb.AllowCoinResponse) => void): grpcWeb.ClientReadableStream<node_pb.AllowCoinResponse>;

  allow(
    request: node_pb.DecryptableAllowCoinRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: node_pb.AllowCoinResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quilibrium.node.node.pb.CoinService/Allow',
        request,
        metadata || {},
        this.methodDescriptorAllow,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quilibrium.node.node.pb.CoinService/Allow',
    request,
    metadata || {},
    this.methodDescriptorAllow);
  }

  methodDescriptorIntersect = new grpcWeb.MethodDescriptor(
    '/quilibrium.node.node.pb.CoinService/Intersect',
    grpcWeb.MethodType.UNARY,
    node_pb.DecryptableIntersectCoinRequest,
    node_pb.IntersectCoinResponse,
    (request: node_pb.DecryptableIntersectCoinRequest) => {
      return request.serializeBinary();
    },
    node_pb.IntersectCoinResponse.deserializeBinary
  );

  intersect(
    request: node_pb.DecryptableIntersectCoinRequest,
    metadata?: grpcWeb.Metadata | null): Promise<node_pb.IntersectCoinResponse>;

  intersect(
    request: node_pb.DecryptableIntersectCoinRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: node_pb.IntersectCoinResponse) => void): grpcWeb.ClientReadableStream<node_pb.IntersectCoinResponse>;

  intersect(
    request: node_pb.DecryptableIntersectCoinRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: node_pb.IntersectCoinResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quilibrium.node.node.pb.CoinService/Intersect',
        request,
        metadata || {},
        this.methodDescriptorIntersect,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quilibrium.node.node.pb.CoinService/Intersect',
    request,
    metadata || {},
    this.methodDescriptorIntersect);
  }

  methodDescriptorMerge = new grpcWeb.MethodDescriptor(
    '/quilibrium.node.node.pb.CoinService/Merge',
    grpcWeb.MethodType.UNARY,
    node_pb.DecryptableMergeCoinRequest,
    node_pb.MergeCoinResponse,
    (request: node_pb.DecryptableMergeCoinRequest) => {
      return request.serializeBinary();
    },
    node_pb.MergeCoinResponse.deserializeBinary
  );

  merge(
    request: node_pb.DecryptableMergeCoinRequest,
    metadata?: grpcWeb.Metadata | null): Promise<node_pb.MergeCoinResponse>;

  merge(
    request: node_pb.DecryptableMergeCoinRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: node_pb.MergeCoinResponse) => void): grpcWeb.ClientReadableStream<node_pb.MergeCoinResponse>;

  merge(
    request: node_pb.DecryptableMergeCoinRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: node_pb.MergeCoinResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quilibrium.node.node.pb.CoinService/Merge',
        request,
        metadata || {},
        this.methodDescriptorMerge,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quilibrium.node.node.pb.CoinService/Merge',
    request,
    metadata || {},
    this.methodDescriptorMerge);
  }

  methodDescriptorMint = new grpcWeb.MethodDescriptor(
    '/quilibrium.node.node.pb.CoinService/Mint',
    grpcWeb.MethodType.UNARY,
    node_pb.DecryptableMintCoinRequest,
    node_pb.MintCoinResponse,
    (request: node_pb.DecryptableMintCoinRequest) => {
      return request.serializeBinary();
    },
    node_pb.MintCoinResponse.deserializeBinary
  );

  mint(
    request: node_pb.DecryptableMintCoinRequest,
    metadata?: grpcWeb.Metadata | null): Promise<node_pb.MintCoinResponse>;

  mint(
    request: node_pb.DecryptableMintCoinRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: node_pb.MintCoinResponse) => void): grpcWeb.ClientReadableStream<node_pb.MintCoinResponse>;

  mint(
    request: node_pb.DecryptableMintCoinRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: node_pb.MintCoinResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quilibrium.node.node.pb.CoinService/Mint',
        request,
        metadata || {},
        this.methodDescriptorMint,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quilibrium.node.node.pb.CoinService/Mint',
    request,
    metadata || {},
    this.methodDescriptorMint);
  }

  methodDescriptorMutualReceive = new grpcWeb.MethodDescriptor(
    '/quilibrium.node.node.pb.CoinService/MutualReceive',
    grpcWeb.MethodType.SERVER_STREAMING,
    node_pb.DecryptableMutualReceiveCoinRequest,
    node_pb.MutualReceiveCoinResponse,
    (request: node_pb.DecryptableMutualReceiveCoinRequest) => {
      return request.serializeBinary();
    },
    node_pb.MutualReceiveCoinResponse.deserializeBinary
  );

  mutualReceive(
    request: node_pb.DecryptableMutualReceiveCoinRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<node_pb.MutualReceiveCoinResponse> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/quilibrium.node.node.pb.CoinService/MutualReceive',
      request,
      metadata || {},
      this.methodDescriptorMutualReceive);
  }

  methodDescriptorMutualTransfer = new grpcWeb.MethodDescriptor(
    '/quilibrium.node.node.pb.CoinService/MutualTransfer',
    grpcWeb.MethodType.SERVER_STREAMING,
    node_pb.DecryptableMutualTransferCoinRequest,
    node_pb.MutualTransferCoinResponse,
    (request: node_pb.DecryptableMutualTransferCoinRequest) => {
      return request.serializeBinary();
    },
    node_pb.MutualTransferCoinResponse.deserializeBinary
  );

  mutualTransfer(
    request: node_pb.DecryptableMutualTransferCoinRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<node_pb.MutualTransferCoinResponse> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/quilibrium.node.node.pb.CoinService/MutualTransfer',
      request,
      metadata || {},
      this.methodDescriptorMutualTransfer);
  }

  methodDescriptorRevoke = new grpcWeb.MethodDescriptor(
    '/quilibrium.node.node.pb.CoinService/Revoke',
    grpcWeb.MethodType.UNARY,
    node_pb.DecryptableRevokeCoinRequest,
    node_pb.RevokeCoinResponse,
    (request: node_pb.DecryptableRevokeCoinRequest) => {
      return request.serializeBinary();
    },
    node_pb.RevokeCoinResponse.deserializeBinary
  );

  revoke(
    request: node_pb.DecryptableRevokeCoinRequest,
    metadata?: grpcWeb.Metadata | null): Promise<node_pb.RevokeCoinResponse>;

  revoke(
    request: node_pb.DecryptableRevokeCoinRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: node_pb.RevokeCoinResponse) => void): grpcWeb.ClientReadableStream<node_pb.RevokeCoinResponse>;

  revoke(
    request: node_pb.DecryptableRevokeCoinRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: node_pb.RevokeCoinResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quilibrium.node.node.pb.CoinService/Revoke',
        request,
        metadata || {},
        this.methodDescriptorRevoke,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quilibrium.node.node.pb.CoinService/Revoke',
    request,
    metadata || {},
    this.methodDescriptorRevoke);
  }

  methodDescriptorSplit = new grpcWeb.MethodDescriptor(
    '/quilibrium.node.node.pb.CoinService/Split',
    grpcWeb.MethodType.UNARY,
    node_pb.DecryptableSplitCoinRequest,
    node_pb.SplitCoinResponse,
    (request: node_pb.DecryptableSplitCoinRequest) => {
      return request.serializeBinary();
    },
    node_pb.SplitCoinResponse.deserializeBinary
  );

  split(
    request: node_pb.DecryptableSplitCoinRequest,
    metadata?: grpcWeb.Metadata | null): Promise<node_pb.SplitCoinResponse>;

  split(
    request: node_pb.DecryptableSplitCoinRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: node_pb.SplitCoinResponse) => void): grpcWeb.ClientReadableStream<node_pb.SplitCoinResponse>;

  split(
    request: node_pb.DecryptableSplitCoinRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: node_pb.SplitCoinResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quilibrium.node.node.pb.CoinService/Split',
        request,
        metadata || {},
        this.methodDescriptorSplit,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quilibrium.node.node.pb.CoinService/Split',
    request,
    metadata || {},
    this.methodDescriptorSplit);
  }

  methodDescriptorTransfer = new grpcWeb.MethodDescriptor(
    '/quilibrium.node.node.pb.CoinService/Transfer',
    grpcWeb.MethodType.UNARY,
    node_pb.DecryptableTransferCoinRequest,
    node_pb.TransferCoinResponse,
    (request: node_pb.DecryptableTransferCoinRequest) => {
      return request.serializeBinary();
    },
    node_pb.TransferCoinResponse.deserializeBinary
  );

  transfer(
    request: node_pb.DecryptableTransferCoinRequest,
    metadata?: grpcWeb.Metadata | null): Promise<node_pb.TransferCoinResponse>;

  transfer(
    request: node_pb.DecryptableTransferCoinRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: node_pb.TransferCoinResponse) => void): grpcWeb.ClientReadableStream<node_pb.TransferCoinResponse>;

  transfer(
    request: node_pb.DecryptableTransferCoinRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: node_pb.TransferCoinResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quilibrium.node.node.pb.CoinService/Transfer',
        request,
        metadata || {},
        this.methodDescriptorTransfer,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quilibrium.node.node.pb.CoinService/Transfer',
    request,
    metadata || {},
    this.methodDescriptorTransfer);
  }

}

export class TransactionServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorApprove = new grpcWeb.MethodDescriptor(
    '/quilibrium.node.node.pb.TransactionService/Approve',
    grpcWeb.MethodType.UNARY,
    node_pb.DecryptableApprovePendingTransactionRequest,
    node_pb.ApprovePendingTransactionResponse,
    (request: node_pb.DecryptableApprovePendingTransactionRequest) => {
      return request.serializeBinary();
    },
    node_pb.ApprovePendingTransactionResponse.deserializeBinary
  );

  approve(
    request: node_pb.DecryptableApprovePendingTransactionRequest,
    metadata?: grpcWeb.Metadata | null): Promise<node_pb.ApprovePendingTransactionResponse>;

  approve(
    request: node_pb.DecryptableApprovePendingTransactionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: node_pb.ApprovePendingTransactionResponse) => void): grpcWeb.ClientReadableStream<node_pb.ApprovePendingTransactionResponse>;

  approve(
    request: node_pb.DecryptableApprovePendingTransactionRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: node_pb.ApprovePendingTransactionResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quilibrium.node.node.pb.TransactionService/Approve',
        request,
        metadata || {},
        this.methodDescriptorApprove,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quilibrium.node.node.pb.TransactionService/Approve',
    request,
    metadata || {},
    this.methodDescriptorApprove);
  }

  methodDescriptorReject = new grpcWeb.MethodDescriptor(
    '/quilibrium.node.node.pb.TransactionService/Reject',
    grpcWeb.MethodType.UNARY,
    node_pb.DecryptableRejectPendingTransactionRequest,
    node_pb.RejectPendingTransactionResponse,
    (request: node_pb.DecryptableRejectPendingTransactionRequest) => {
      return request.serializeBinary();
    },
    node_pb.RejectPendingTransactionResponse.deserializeBinary
  );

  reject(
    request: node_pb.DecryptableRejectPendingTransactionRequest,
    metadata?: grpcWeb.Metadata | null): Promise<node_pb.RejectPendingTransactionResponse>;

  reject(
    request: node_pb.DecryptableRejectPendingTransactionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: node_pb.RejectPendingTransactionResponse) => void): grpcWeb.ClientReadableStream<node_pb.RejectPendingTransactionResponse>;

  reject(
    request: node_pb.DecryptableRejectPendingTransactionRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: node_pb.RejectPendingTransactionResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quilibrium.node.node.pb.TransactionService/Reject',
        request,
        metadata || {},
        this.methodDescriptorReject,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quilibrium.node.node.pb.TransactionService/Reject',
    request,
    metadata || {},
    this.methodDescriptorReject);
  }

}

export class NodeStatsClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorPutNodeInfo = new grpcWeb.MethodDescriptor(
    '/quilibrium.node.node.pb.NodeStats/PutNodeInfo',
    grpcWeb.MethodType.UNARY,
    node_pb.PutNodeInfoRequest,
    node_pb.PutResponse,
    (request: node_pb.PutNodeInfoRequest) => {
      return request.serializeBinary();
    },
    node_pb.PutResponse.deserializeBinary
  );

  putNodeInfo(
    request: node_pb.PutNodeInfoRequest,
    metadata?: grpcWeb.Metadata | null): Promise<node_pb.PutResponse>;

  putNodeInfo(
    request: node_pb.PutNodeInfoRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: node_pb.PutResponse) => void): grpcWeb.ClientReadableStream<node_pb.PutResponse>;

  putNodeInfo(
    request: node_pb.PutNodeInfoRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: node_pb.PutResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quilibrium.node.node.pb.NodeStats/PutNodeInfo',
        request,
        metadata || {},
        this.methodDescriptorPutNodeInfo,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quilibrium.node.node.pb.NodeStats/PutNodeInfo',
    request,
    metadata || {},
    this.methodDescriptorPutNodeInfo);
  }

  methodDescriptorPutPeerInfo = new grpcWeb.MethodDescriptor(
    '/quilibrium.node.node.pb.NodeStats/PutPeerInfo',
    grpcWeb.MethodType.UNARY,
    node_pb.PutPeerInfoRequest,
    node_pb.PutResponse,
    (request: node_pb.PutPeerInfoRequest) => {
      return request.serializeBinary();
    },
    node_pb.PutResponse.deserializeBinary
  );

  putPeerInfo(
    request: node_pb.PutPeerInfoRequest,
    metadata?: grpcWeb.Metadata | null): Promise<node_pb.PutResponse>;

  putPeerInfo(
    request: node_pb.PutPeerInfoRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: node_pb.PutResponse) => void): grpcWeb.ClientReadableStream<node_pb.PutResponse>;

  putPeerInfo(
    request: node_pb.PutPeerInfoRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: node_pb.PutResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quilibrium.node.node.pb.NodeStats/PutPeerInfo',
        request,
        metadata || {},
        this.methodDescriptorPutPeerInfo,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quilibrium.node.node.pb.NodeStats/PutPeerInfo',
    request,
    metadata || {},
    this.methodDescriptorPutPeerInfo);
  }

}

