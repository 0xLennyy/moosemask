// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v3.20.3
// source: channel.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Ed448Signature } from "./keys";

export const protobufPackage = "quilibrium.node.channel.pb";

/** Describes a general channel envelope for a message. */
export interface P2PChannelEnvelope {
  /**
   * A general protocol identifier as a uint32 – this is expected to rarely
   * iterate, and should be uniquely identifying both protocol and version.
   * Pragmatically speaking, this implies that the least significant byte
   * specifies version (which should iterate most minimally), and the three most
   * significant bytes should specify protocol. Recipients SHOULD ignore
   * messages with incompatible protocol identifiers, but also SHOULD warn on
   * identifiers with versions higher than the supported protocol. A large
   * number of unsupported protocol messages may indicate spam/some other
   * attack, whereas a large number of unsupported protocol versions may
   * indicate an out of date client, respective to which side is the maximum of
   * the version number.
   */
  protocolIdentifier: number;
  /**
   * The encrypted message header. Message header encryption is mandatory –
   * P2P channels in some cases pre-empt the mixnet and leaky information from
   * unencrypted message headers could de-anonymize the recipient. It is thus
   * also mandatory at the protocol implementation level that header sizes are
   * consistent within a protocol so as to not leak metadata. An example of this
   * is in Double and Triple-Ratchet, where the sequence identifiers MUST be
   * encoded as fixed-length integers, as variable encoding can indicate a
   * message being in the first 256, 65,536, etc. if an exchange is highly
   * asymmetrical in sends/receives. This is especially critical in long
   * running protocols with a need for fixed length messages (see message_body
   * notes).
   */
  messageHeader:
    | MessageCiphertext
    | undefined;
  /**
   * The encrypted message body. Message bodies are variable length – ciphertext
   * could range widely, however if this metadata is pertinent to determining
   * protocol state, such as knowing what round an encapsulated protocol is in,
   * or potentially what might be transferred over the protocol, protocol
   * implementers SHOULD utilize chunking and send fixed length messages.
   * Additionally, if rounds themselves are highly asymmetric or have
   * long-standing processing times that could dangerously leak information of
   * round state, implementers SHOULD defer protocol use to leverage the mixnet.
   * If this is not feasible, the implementation details are left up to the
   * exercise of the protocol author.
   */
  messageBody: MessageCiphertext | undefined;
}

/** Describes a general ciphertext payload. */
export interface MessageCiphertext {
  /**
   * The intialization vector used for encryption. While cipher specific,
   * typically this should be a unique value for every ciphertext. If this is
   * not the case for a protocol where it should be, this SHOULD be considered
   * an invalid message and warned, as it could either indicate compromise,
   * or a faulty cryptographic implementation – such as a faulty PKCS#11
   * implementation that has a code path to handle HSM vendors which mandate
   * zeroed IVs before passing into encryption methods, as they will update the
   * IV within the HSM through hardware-supplied entropy.
   */
  initializationVector: Uint8Array;
  /**
   * The raw ciphertext byte string. This will be cipher specific, however some
   * general attributes are expected to be followed. If there is a common
   * layout expected, such as AES-GCM having the GCM tag appended to the
   * ciphertext, please follow the common layout.
   */
  ciphertext: Uint8Array;
  /**
   * The associated data byte string, if available. This will be highly protocol
   * specific, but SHOULD NOT leak metadata.
   */
  associatedData: Uint8Array;
}

/** Describes the announcement of a new proving key. */
export interface ProvingKeyAnnouncement {
  /**
   * The commitment to a Schnorr proof of the Identity Key. The commitment is
   * produced by taking a hash of the C and S components of the proof.
   */
  identityCommitment: Uint8Array;
  /**
   * The commitment to a Schnorr proof of the Signed Pre Key. The commitment is
   * produced by taking a hash of the C and S components of the proof.
   */
  prekeyCommitment: Uint8Array;
  provingKeySignatureEd448?: Ed448Signature | undefined;
}

/** Represents a request for a proving key. */
export interface ProvingKeyRequest {
  provingKeyBytes: Uint8Array;
}

/** Describes the aggregation of inclusion commitments for a given clock frame */
export interface InclusionAggregateProof {
  /** The filter in which the inclusion proof was produced. */
  filter: Uint8Array;
  /** The frame number in which the inclusion proof was added. */
  frameNumber: Long;
  /** The collection of inclusion commitments, in order. */
  inclusionCommitments: InclusionCommitment[];
  /**
   * The raw serialized proof, mirroring the type of commitment scheme used
   * within the inclusion proofs.
   */
  proof: Uint8Array;
}

/** Describes the commitment of a data's inclusion in a given clock frame */
export interface InclusionCommitment {
  /** The filter in which the inclusion aggregate proof was produced. */
  filter: Uint8Array;
  /** The frame number in which the inclusion aggregate proof was added. */
  frameNumber: Long;
  /** The position of the data in the proof. */
  position: number;
  /** The specific type url represented by the data. */
  typeUrl: string;
  /**
   * The raw serialized data as incorporated into the inclusion proof. Due to
   * the non-deterministic nature of protobuf serialization, this data is an
   * opaque binary string so that inclusion proofs can be accurately assessed
   * between various node implementations, and retain forwards-compatibility
   * with additional properties in future revisions to types.
   */
  data: Uint8Array;
  /**
   * The raw serialized commitment. Similar to data, this commitment data is an
   * opaque binary string so that future commitment types can be added without
   * having to break the underlying inclusion structure.
   */
  commitment: Uint8Array;
}

/**
 * Describes the announcement of both an identity key and signed pre key. This
 * is expected to be used for the initial announcement of a key bundle, and
 * subsequent full revocations if identity key and signed pre keys are both
 * suspected of/known to be compromised. Signatures under KeyBundleAnnouncement
 * are expected to be cross-signed, such that the signature on the identity key
 * is produced through the prover key, the signature on the signed pre key is
 * produced through the identity key. ProvingKeyAnnouncements may be repeated
 * whenever a key bundle update is expected – only the first proving key
 * announcement is retained in inclusion proofs, but the announcements
 * necessarily are required for key bundle updates, as they provide a commitment
 * to the updated keys' Schnorr proofs. An updated KeyBundleAnnouncement must
 * be captured in an inclusion proof before it may be used for communication
 * channels, and may only be used in communication channels once a lobby has
 * opened _after_ the inclusion proof. If a lobby is open during the time the
 * inclusion proof has been created, the announcement is not yet considered
 * valid.
 */
export interface KeyBundleAnnouncement {
  identityKey: IdentityKey | undefined;
  signedPreKey: SignedPreKey | undefined;
  provingKeyBytes: Uint8Array;
}

/**
 * Describes the Identity Key and corresponding Schnorr proof. Schnorr proofs
 * are expected to mirror the EC parameters of the proving and identity key. If
 * they do not, validation will fail.
 */
export interface IdentityKey {
  /** The C component of the Schnorr proof, serialized as big endian. */
  challenge: Uint8Array;
  /** The S component of the Schnorr proof, serialized as big endian. */
  response: Uint8Array;
  /**
   * The Statement component of the Schnorr proof, serialized as an (compressed,
   * if possible) affine representation of the point.
   */
  statement: Uint8Array;
  publicKeySignatureEd448?: Ed448Signature | undefined;
}

/**
 * Describes the Signed Pre Key and corresponding Schnorr proof. Schnorr proofs
 * are expected to mirror the EC parameters of the identity and signed pre key.
 * If they do not, validation will fail.
 */
export interface SignedPreKey {
  /** The C component of the Schnorr proof, serialized as big endian. */
  challenge: Uint8Array;
  /** The S component of the Schnorr proof, serialized as big endian. */
  response: Uint8Array;
  /**
   * The Statement component of the Schnorr proof, serialized as an (compressed,
   * if possible) affine representation of the point.
   */
  statement: Uint8Array;
  publicKeySignatureEd448?: Ed448Signature | undefined;
}

function createBaseP2PChannelEnvelope(): P2PChannelEnvelope {
  return { protocolIdentifier: 0, messageHeader: undefined, messageBody: undefined };
}

export const P2PChannelEnvelope: MessageFns<P2PChannelEnvelope> = {
  encode(message: P2PChannelEnvelope, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.protocolIdentifier !== 0) {
      writer.uint32(8).uint32(message.protocolIdentifier);
    }
    if (message.messageHeader !== undefined) {
      MessageCiphertext.encode(message.messageHeader, writer.uint32(18).fork()).join();
    }
    if (message.messageBody !== undefined) {
      MessageCiphertext.encode(message.messageBody, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): P2PChannelEnvelope {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseP2PChannelEnvelope();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.protocolIdentifier = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.messageHeader = MessageCiphertext.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.messageBody = MessageCiphertext.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): P2PChannelEnvelope {
    return {
      protocolIdentifier: isSet(object.protocolIdentifier) ? globalThis.Number(object.protocolIdentifier) : 0,
      messageHeader: isSet(object.messageHeader) ? MessageCiphertext.fromJSON(object.messageHeader) : undefined,
      messageBody: isSet(object.messageBody) ? MessageCiphertext.fromJSON(object.messageBody) : undefined,
    };
  },

  toJSON(message: P2PChannelEnvelope): unknown {
    const obj: any = {};
    if (message.protocolIdentifier !== 0) {
      obj.protocolIdentifier = Math.round(message.protocolIdentifier);
    }
    if (message.messageHeader !== undefined) {
      obj.messageHeader = MessageCiphertext.toJSON(message.messageHeader);
    }
    if (message.messageBody !== undefined) {
      obj.messageBody = MessageCiphertext.toJSON(message.messageBody);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<P2PChannelEnvelope>, I>>(base?: I): P2PChannelEnvelope {
    return P2PChannelEnvelope.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<P2PChannelEnvelope>, I>>(object: I): P2PChannelEnvelope {
    const message = createBaseP2PChannelEnvelope();
    message.protocolIdentifier = object.protocolIdentifier ?? 0;
    message.messageHeader = (object.messageHeader !== undefined && object.messageHeader !== null)
      ? MessageCiphertext.fromPartial(object.messageHeader)
      : undefined;
    message.messageBody = (object.messageBody !== undefined && object.messageBody !== null)
      ? MessageCiphertext.fromPartial(object.messageBody)
      : undefined;
    return message;
  },
};

function createBaseMessageCiphertext(): MessageCiphertext {
  return { initializationVector: new Uint8Array(0), ciphertext: new Uint8Array(0), associatedData: new Uint8Array(0) };
}

export const MessageCiphertext: MessageFns<MessageCiphertext> = {
  encode(message: MessageCiphertext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.initializationVector.length !== 0) {
      writer.uint32(10).bytes(message.initializationVector);
    }
    if (message.ciphertext.length !== 0) {
      writer.uint32(18).bytes(message.ciphertext);
    }
    if (message.associatedData.length !== 0) {
      writer.uint32(26).bytes(message.associatedData);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MessageCiphertext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessageCiphertext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.initializationVector = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ciphertext = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.associatedData = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MessageCiphertext {
    return {
      initializationVector: isSet(object.initializationVector)
        ? bytesFromBase64(object.initializationVector)
        : new Uint8Array(0),
      ciphertext: isSet(object.ciphertext) ? bytesFromBase64(object.ciphertext) : new Uint8Array(0),
      associatedData: isSet(object.associatedData) ? bytesFromBase64(object.associatedData) : new Uint8Array(0),
    };
  },

  toJSON(message: MessageCiphertext): unknown {
    const obj: any = {};
    if (message.initializationVector.length !== 0) {
      obj.initializationVector = base64FromBytes(message.initializationVector);
    }
    if (message.ciphertext.length !== 0) {
      obj.ciphertext = base64FromBytes(message.ciphertext);
    }
    if (message.associatedData.length !== 0) {
      obj.associatedData = base64FromBytes(message.associatedData);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MessageCiphertext>, I>>(base?: I): MessageCiphertext {
    return MessageCiphertext.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MessageCiphertext>, I>>(object: I): MessageCiphertext {
    const message = createBaseMessageCiphertext();
    message.initializationVector = object.initializationVector ?? new Uint8Array(0);
    message.ciphertext = object.ciphertext ?? new Uint8Array(0);
    message.associatedData = object.associatedData ?? new Uint8Array(0);
    return message;
  },
};

function createBaseProvingKeyAnnouncement(): ProvingKeyAnnouncement {
  return {
    identityCommitment: new Uint8Array(0),
    prekeyCommitment: new Uint8Array(0),
    provingKeySignatureEd448: undefined,
  };
}

export const ProvingKeyAnnouncement: MessageFns<ProvingKeyAnnouncement> = {
  encode(message: ProvingKeyAnnouncement, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.identityCommitment.length !== 0) {
      writer.uint32(10).bytes(message.identityCommitment);
    }
    if (message.prekeyCommitment.length !== 0) {
      writer.uint32(18).bytes(message.prekeyCommitment);
    }
    if (message.provingKeySignatureEd448 !== undefined) {
      Ed448Signature.encode(message.provingKeySignatureEd448, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProvingKeyAnnouncement {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProvingKeyAnnouncement();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.identityCommitment = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.prekeyCommitment = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.provingKeySignatureEd448 = Ed448Signature.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProvingKeyAnnouncement {
    return {
      identityCommitment: isSet(object.identityCommitment)
        ? bytesFromBase64(object.identityCommitment)
        : new Uint8Array(0),
      prekeyCommitment: isSet(object.prekeyCommitment) ? bytesFromBase64(object.prekeyCommitment) : new Uint8Array(0),
      provingKeySignatureEd448: isSet(object.provingKeySignatureEd448)
        ? Ed448Signature.fromJSON(object.provingKeySignatureEd448)
        : undefined,
    };
  },

  toJSON(message: ProvingKeyAnnouncement): unknown {
    const obj: any = {};
    if (message.identityCommitment.length !== 0) {
      obj.identityCommitment = base64FromBytes(message.identityCommitment);
    }
    if (message.prekeyCommitment.length !== 0) {
      obj.prekeyCommitment = base64FromBytes(message.prekeyCommitment);
    }
    if (message.provingKeySignatureEd448 !== undefined) {
      obj.provingKeySignatureEd448 = Ed448Signature.toJSON(message.provingKeySignatureEd448);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProvingKeyAnnouncement>, I>>(base?: I): ProvingKeyAnnouncement {
    return ProvingKeyAnnouncement.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProvingKeyAnnouncement>, I>>(object: I): ProvingKeyAnnouncement {
    const message = createBaseProvingKeyAnnouncement();
    message.identityCommitment = object.identityCommitment ?? new Uint8Array(0);
    message.prekeyCommitment = object.prekeyCommitment ?? new Uint8Array(0);
    message.provingKeySignatureEd448 =
      (object.provingKeySignatureEd448 !== undefined && object.provingKeySignatureEd448 !== null)
        ? Ed448Signature.fromPartial(object.provingKeySignatureEd448)
        : undefined;
    return message;
  },
};

function createBaseProvingKeyRequest(): ProvingKeyRequest {
  return { provingKeyBytes: new Uint8Array(0) };
}

export const ProvingKeyRequest: MessageFns<ProvingKeyRequest> = {
  encode(message: ProvingKeyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.provingKeyBytes.length !== 0) {
      writer.uint32(10).bytes(message.provingKeyBytes);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProvingKeyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProvingKeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.provingKeyBytes = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProvingKeyRequest {
    return {
      provingKeyBytes: isSet(object.provingKeyBytes) ? bytesFromBase64(object.provingKeyBytes) : new Uint8Array(0),
    };
  },

  toJSON(message: ProvingKeyRequest): unknown {
    const obj: any = {};
    if (message.provingKeyBytes.length !== 0) {
      obj.provingKeyBytes = base64FromBytes(message.provingKeyBytes);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProvingKeyRequest>, I>>(base?: I): ProvingKeyRequest {
    return ProvingKeyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProvingKeyRequest>, I>>(object: I): ProvingKeyRequest {
    const message = createBaseProvingKeyRequest();
    message.provingKeyBytes = object.provingKeyBytes ?? new Uint8Array(0);
    return message;
  },
};

function createBaseInclusionAggregateProof(): InclusionAggregateProof {
  return { filter: new Uint8Array(0), frameNumber: Long.UZERO, inclusionCommitments: [], proof: new Uint8Array(0) };
}

export const InclusionAggregateProof: MessageFns<InclusionAggregateProof> = {
  encode(message: InclusionAggregateProof, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filter.length !== 0) {
      writer.uint32(10).bytes(message.filter);
    }
    if (!message.frameNumber.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.frameNumber.toString());
    }
    for (const v of message.inclusionCommitments) {
      InclusionCommitment.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.proof.length !== 0) {
      writer.uint32(34).bytes(message.proof);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InclusionAggregateProof {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInclusionAggregateProof();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filter = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.frameNumber = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.inclusionCommitments.push(InclusionCommitment.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.proof = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InclusionAggregateProof {
    return {
      filter: isSet(object.filter) ? bytesFromBase64(object.filter) : new Uint8Array(0),
      frameNumber: isSet(object.frameNumber) ? Long.fromValue(object.frameNumber) : Long.UZERO,
      inclusionCommitments: globalThis.Array.isArray(object?.inclusionCommitments)
        ? object.inclusionCommitments.map((e: any) => InclusionCommitment.fromJSON(e))
        : [],
      proof: isSet(object.proof) ? bytesFromBase64(object.proof) : new Uint8Array(0),
    };
  },

  toJSON(message: InclusionAggregateProof): unknown {
    const obj: any = {};
    if (message.filter.length !== 0) {
      obj.filter = base64FromBytes(message.filter);
    }
    if (!message.frameNumber.equals(Long.UZERO)) {
      obj.frameNumber = (message.frameNumber || Long.UZERO).toString();
    }
    if (message.inclusionCommitments?.length) {
      obj.inclusionCommitments = message.inclusionCommitments.map((e) => InclusionCommitment.toJSON(e));
    }
    if (message.proof.length !== 0) {
      obj.proof = base64FromBytes(message.proof);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InclusionAggregateProof>, I>>(base?: I): InclusionAggregateProof {
    return InclusionAggregateProof.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InclusionAggregateProof>, I>>(object: I): InclusionAggregateProof {
    const message = createBaseInclusionAggregateProof();
    message.filter = object.filter ?? new Uint8Array(0);
    message.frameNumber = (object.frameNumber !== undefined && object.frameNumber !== null)
      ? Long.fromValue(object.frameNumber)
      : Long.UZERO;
    message.inclusionCommitments = object.inclusionCommitments?.map((e) => InclusionCommitment.fromPartial(e)) || [];
    message.proof = object.proof ?? new Uint8Array(0);
    return message;
  },
};

function createBaseInclusionCommitment(): InclusionCommitment {
  return {
    filter: new Uint8Array(0),
    frameNumber: Long.UZERO,
    position: 0,
    typeUrl: "",
    data: new Uint8Array(0),
    commitment: new Uint8Array(0),
  };
}

export const InclusionCommitment: MessageFns<InclusionCommitment> = {
  encode(message: InclusionCommitment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filter.length !== 0) {
      writer.uint32(10).bytes(message.filter);
    }
    if (!message.frameNumber.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.frameNumber.toString());
    }
    if (message.position !== 0) {
      writer.uint32(24).uint32(message.position);
    }
    if (message.typeUrl !== "") {
      writer.uint32(34).string(message.typeUrl);
    }
    if (message.data.length !== 0) {
      writer.uint32(42).bytes(message.data);
    }
    if (message.commitment.length !== 0) {
      writer.uint32(50).bytes(message.commitment);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InclusionCommitment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInclusionCommitment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filter = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.frameNumber = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.position = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.typeUrl = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.commitment = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InclusionCommitment {
    return {
      filter: isSet(object.filter) ? bytesFromBase64(object.filter) : new Uint8Array(0),
      frameNumber: isSet(object.frameNumber) ? Long.fromValue(object.frameNumber) : Long.UZERO,
      position: isSet(object.position) ? globalThis.Number(object.position) : 0,
      typeUrl: isSet(object.typeUrl) ? globalThis.String(object.typeUrl) : "",
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
      commitment: isSet(object.commitment) ? bytesFromBase64(object.commitment) : new Uint8Array(0),
    };
  },

  toJSON(message: InclusionCommitment): unknown {
    const obj: any = {};
    if (message.filter.length !== 0) {
      obj.filter = base64FromBytes(message.filter);
    }
    if (!message.frameNumber.equals(Long.UZERO)) {
      obj.frameNumber = (message.frameNumber || Long.UZERO).toString();
    }
    if (message.position !== 0) {
      obj.position = Math.round(message.position);
    }
    if (message.typeUrl !== "") {
      obj.typeUrl = message.typeUrl;
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    if (message.commitment.length !== 0) {
      obj.commitment = base64FromBytes(message.commitment);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InclusionCommitment>, I>>(base?: I): InclusionCommitment {
    return InclusionCommitment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InclusionCommitment>, I>>(object: I): InclusionCommitment {
    const message = createBaseInclusionCommitment();
    message.filter = object.filter ?? new Uint8Array(0);
    message.frameNumber = (object.frameNumber !== undefined && object.frameNumber !== null)
      ? Long.fromValue(object.frameNumber)
      : Long.UZERO;
    message.position = object.position ?? 0;
    message.typeUrl = object.typeUrl ?? "";
    message.data = object.data ?? new Uint8Array(0);
    message.commitment = object.commitment ?? new Uint8Array(0);
    return message;
  },
};

function createBaseKeyBundleAnnouncement(): KeyBundleAnnouncement {
  return { identityKey: undefined, signedPreKey: undefined, provingKeyBytes: new Uint8Array(0) };
}

export const KeyBundleAnnouncement: MessageFns<KeyBundleAnnouncement> = {
  encode(message: KeyBundleAnnouncement, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.identityKey !== undefined) {
      IdentityKey.encode(message.identityKey, writer.uint32(10).fork()).join();
    }
    if (message.signedPreKey !== undefined) {
      SignedPreKey.encode(message.signedPreKey, writer.uint32(18).fork()).join();
    }
    if (message.provingKeyBytes.length !== 0) {
      writer.uint32(26).bytes(message.provingKeyBytes);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KeyBundleAnnouncement {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKeyBundleAnnouncement();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.identityKey = IdentityKey.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.signedPreKey = SignedPreKey.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.provingKeyBytes = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KeyBundleAnnouncement {
    return {
      identityKey: isSet(object.identityKey) ? IdentityKey.fromJSON(object.identityKey) : undefined,
      signedPreKey: isSet(object.signedPreKey) ? SignedPreKey.fromJSON(object.signedPreKey) : undefined,
      provingKeyBytes: isSet(object.provingKeyBytes) ? bytesFromBase64(object.provingKeyBytes) : new Uint8Array(0),
    };
  },

  toJSON(message: KeyBundleAnnouncement): unknown {
    const obj: any = {};
    if (message.identityKey !== undefined) {
      obj.identityKey = IdentityKey.toJSON(message.identityKey);
    }
    if (message.signedPreKey !== undefined) {
      obj.signedPreKey = SignedPreKey.toJSON(message.signedPreKey);
    }
    if (message.provingKeyBytes.length !== 0) {
      obj.provingKeyBytes = base64FromBytes(message.provingKeyBytes);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KeyBundleAnnouncement>, I>>(base?: I): KeyBundleAnnouncement {
    return KeyBundleAnnouncement.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KeyBundleAnnouncement>, I>>(object: I): KeyBundleAnnouncement {
    const message = createBaseKeyBundleAnnouncement();
    message.identityKey = (object.identityKey !== undefined && object.identityKey !== null)
      ? IdentityKey.fromPartial(object.identityKey)
      : undefined;
    message.signedPreKey = (object.signedPreKey !== undefined && object.signedPreKey !== null)
      ? SignedPreKey.fromPartial(object.signedPreKey)
      : undefined;
    message.provingKeyBytes = object.provingKeyBytes ?? new Uint8Array(0);
    return message;
  },
};

function createBaseIdentityKey(): IdentityKey {
  return {
    challenge: new Uint8Array(0),
    response: new Uint8Array(0),
    statement: new Uint8Array(0),
    publicKeySignatureEd448: undefined,
  };
}

export const IdentityKey: MessageFns<IdentityKey> = {
  encode(message: IdentityKey, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.challenge.length !== 0) {
      writer.uint32(10).bytes(message.challenge);
    }
    if (message.response.length !== 0) {
      writer.uint32(18).bytes(message.response);
    }
    if (message.statement.length !== 0) {
      writer.uint32(26).bytes(message.statement);
    }
    if (message.publicKeySignatureEd448 !== undefined) {
      Ed448Signature.encode(message.publicKeySignatureEd448, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IdentityKey {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIdentityKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.challenge = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.response = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.statement = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.publicKeySignatureEd448 = Ed448Signature.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IdentityKey {
    return {
      challenge: isSet(object.challenge) ? bytesFromBase64(object.challenge) : new Uint8Array(0),
      response: isSet(object.response) ? bytesFromBase64(object.response) : new Uint8Array(0),
      statement: isSet(object.statement) ? bytesFromBase64(object.statement) : new Uint8Array(0),
      publicKeySignatureEd448: isSet(object.publicKeySignatureEd448)
        ? Ed448Signature.fromJSON(object.publicKeySignatureEd448)
        : undefined,
    };
  },

  toJSON(message: IdentityKey): unknown {
    const obj: any = {};
    if (message.challenge.length !== 0) {
      obj.challenge = base64FromBytes(message.challenge);
    }
    if (message.response.length !== 0) {
      obj.response = base64FromBytes(message.response);
    }
    if (message.statement.length !== 0) {
      obj.statement = base64FromBytes(message.statement);
    }
    if (message.publicKeySignatureEd448 !== undefined) {
      obj.publicKeySignatureEd448 = Ed448Signature.toJSON(message.publicKeySignatureEd448);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IdentityKey>, I>>(base?: I): IdentityKey {
    return IdentityKey.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IdentityKey>, I>>(object: I): IdentityKey {
    const message = createBaseIdentityKey();
    message.challenge = object.challenge ?? new Uint8Array(0);
    message.response = object.response ?? new Uint8Array(0);
    message.statement = object.statement ?? new Uint8Array(0);
    message.publicKeySignatureEd448 =
      (object.publicKeySignatureEd448 !== undefined && object.publicKeySignatureEd448 !== null)
        ? Ed448Signature.fromPartial(object.publicKeySignatureEd448)
        : undefined;
    return message;
  },
};

function createBaseSignedPreKey(): SignedPreKey {
  return {
    challenge: new Uint8Array(0),
    response: new Uint8Array(0),
    statement: new Uint8Array(0),
    publicKeySignatureEd448: undefined,
  };
}

export const SignedPreKey: MessageFns<SignedPreKey> = {
  encode(message: SignedPreKey, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.challenge.length !== 0) {
      writer.uint32(10).bytes(message.challenge);
    }
    if (message.response.length !== 0) {
      writer.uint32(18).bytes(message.response);
    }
    if (message.statement.length !== 0) {
      writer.uint32(26).bytes(message.statement);
    }
    if (message.publicKeySignatureEd448 !== undefined) {
      Ed448Signature.encode(message.publicKeySignatureEd448, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignedPreKey {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignedPreKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.challenge = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.response = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.statement = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.publicKeySignatureEd448 = Ed448Signature.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignedPreKey {
    return {
      challenge: isSet(object.challenge) ? bytesFromBase64(object.challenge) : new Uint8Array(0),
      response: isSet(object.response) ? bytesFromBase64(object.response) : new Uint8Array(0),
      statement: isSet(object.statement) ? bytesFromBase64(object.statement) : new Uint8Array(0),
      publicKeySignatureEd448: isSet(object.publicKeySignatureEd448)
        ? Ed448Signature.fromJSON(object.publicKeySignatureEd448)
        : undefined,
    };
  },

  toJSON(message: SignedPreKey): unknown {
    const obj: any = {};
    if (message.challenge.length !== 0) {
      obj.challenge = base64FromBytes(message.challenge);
    }
    if (message.response.length !== 0) {
      obj.response = base64FromBytes(message.response);
    }
    if (message.statement.length !== 0) {
      obj.statement = base64FromBytes(message.statement);
    }
    if (message.publicKeySignatureEd448 !== undefined) {
      obj.publicKeySignatureEd448 = Ed448Signature.toJSON(message.publicKeySignatureEd448);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignedPreKey>, I>>(base?: I): SignedPreKey {
    return SignedPreKey.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignedPreKey>, I>>(object: I): SignedPreKey {
    const message = createBaseSignedPreKey();
    message.challenge = object.challenge ?? new Uint8Array(0);
    message.response = object.response ?? new Uint8Array(0);
    message.statement = object.statement ?? new Uint8Array(0);
    message.publicKeySignatureEd448 =
      (object.publicKeySignatureEd448 !== undefined && object.publicKeySignatureEd448 !== null)
        ? Ed448Signature.fromPartial(object.publicKeySignatureEd448)
        : undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
