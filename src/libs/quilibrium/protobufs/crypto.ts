// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v3.20.3
// source: crypto.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "crypto.pb";

export enum KeyType {
  RSA = 0,
  Ed25519 = 1,
  Secp256k1 = 2,
  ECDSA = 3,
  Ed448 = 4,
  UNRECOGNIZED = -1,
}

export function keyTypeFromJSON(object: any): KeyType {
  switch (object) {
    case 0:
    case "RSA":
      return KeyType.RSA;
    case 1:
    case "Ed25519":
      return KeyType.Ed25519;
    case 2:
    case "Secp256k1":
      return KeyType.Secp256k1;
    case 3:
    case "ECDSA":
      return KeyType.ECDSA;
    case 4:
    case "Ed448":
      return KeyType.Ed448;
    case -1:
    case "UNRECOGNIZED":
    default:
      return KeyType.UNRECOGNIZED;
  }
}

export function keyTypeToJSON(object: KeyType): string {
  switch (object) {
    case KeyType.RSA:
      return "RSA";
    case KeyType.Ed25519:
      return "Ed25519";
    case KeyType.Secp256k1:
      return "Secp256k1";
    case KeyType.ECDSA:
      return "ECDSA";
    case KeyType.Ed448:
      return "Ed448";
    case KeyType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface PublicKey {
  Type: KeyType;
  Data: Uint8Array;
}

export interface PrivateKey {
  Type: KeyType;
  Data: Uint8Array;
}

function createBasePublicKey(): PublicKey {
  return { Type: 0, Data: new Uint8Array(0) };
}

export const PublicKey: MessageFns<PublicKey> = {
  encode(message: PublicKey, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.Type !== 0) {
      writer.uint32(8).int32(message.Type);
    }
    if (message.Data.length !== 0) {
      writer.uint32(18).bytes(message.Data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PublicKey {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePublicKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.Type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.Data = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PublicKey {
    return {
      Type: isSet(object.Type) ? keyTypeFromJSON(object.Type) : 0,
      Data: isSet(object.Data) ? bytesFromBase64(object.Data) : new Uint8Array(0),
    };
  },

  toJSON(message: PublicKey): unknown {
    const obj: any = {};
    if (message.Type !== 0) {
      obj.Type = keyTypeToJSON(message.Type);
    }
    if (message.Data.length !== 0) {
      obj.Data = base64FromBytes(message.Data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PublicKey>, I>>(base?: I): PublicKey {
    return PublicKey.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PublicKey>, I>>(object: I): PublicKey {
    const message = createBasePublicKey();
    message.Type = object.Type ?? 0;
    message.Data = object.Data ?? new Uint8Array(0);
    return message;
  },
};

function createBasePrivateKey(): PrivateKey {
  return { Type: 0, Data: new Uint8Array(0) };
}

export const PrivateKey: MessageFns<PrivateKey> = {
  encode(message: PrivateKey, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.Type !== 0) {
      writer.uint32(8).int32(message.Type);
    }
    if (message.Data.length !== 0) {
      writer.uint32(18).bytes(message.Data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PrivateKey {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrivateKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.Type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.Data = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PrivateKey {
    return {
      Type: isSet(object.Type) ? keyTypeFromJSON(object.Type) : 0,
      Data: isSet(object.Data) ? bytesFromBase64(object.Data) : new Uint8Array(0),
    };
  },

  toJSON(message: PrivateKey): unknown {
    const obj: any = {};
    if (message.Type !== 0) {
      obj.Type = keyTypeToJSON(message.Type);
    }
    if (message.Data.length !== 0) {
      obj.Data = base64FromBytes(message.Data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PrivateKey>, I>>(base?: I): PrivateKey {
    return PrivateKey.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PrivateKey>, I>>(object: I): PrivateKey {
    const message = createBasePrivateKey();
    message.Type = object.Type ?? 0;
    message.Data = object.Data ?? new Uint8Array(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
