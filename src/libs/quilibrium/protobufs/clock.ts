// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v3.20.3
// source: clock.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { InclusionAggregateProof } from "./channel";
import { Ed448Signature } from "./keys";

export const protobufPackage = "quilibrium.node.clock.pb";

/**
 * Represents a clock frame for a given filter. Clock frames are the primary
 * sequencing mechanism upon which the network derives consensus. As the master
 * pulse clock, this provides deterministic but random leader election. At the
 * data pulse clock level, this provides the same, within a quorum for data
 * sequencers.
 */
export interface ClockFrame {
  /**
   * The filter is used as a domain separator for input, but in the context of
   * verifiable delay functions, is simply prepended to the input field as input
   * for the VDF.
   */
  filter: Uint8Array;
  /**
   * A strictly monotonically-increasing frame number. Used for culling old
   * frames past a configurable cutoff point.
   */
  frameNumber: Long;
  /**
   * The self-reported timestamp from the proof publisher, encoded as an int64
   * of the Unix epoch in milliseconds. Should be good until
   * 292278994-08-17 07:12:55.807, at which point, this is someone else's
   * problem. Timestamps are imperfect, but smoothed in a rolling window to
   * ensure a network and quorum-stable difficulty adjustment. Anomalies are
   * bounded such that a timestamp beyond ten times the average issuance rate
   * is discarded in preference to the runner up electees, unless there is
   * simply no alternative available (for example, if a network outage occurred
   * from an upgrade or bug).
   */
  timestamp: Long;
  /**
   * The difficulty level used for the frame. Difficulty is calculated based on
   * the previous 60 timestamps correlated with difficulties, such that the
   * interval smooths out to align to the type-defined rate. This is expected to
   * increase subtly with clock speed and future hardware implementations, but
   * due to incentive alignment associated with data proofs, not fastest clock
   * in the west, should be gradual.
   */
  difficulty: number;
  /**
   * The selector value of the previous frame's output, produced as a Poseidon
   * hash of the output.
   */
  parentSelector: Uint8Array;
  /**
   * The input data used for the VDF proof. For the master pulse clock, this is
   * the concatenation of the filter, frame number, difficulty, previous frame's
   * output, and the rolled state proof commitment input. For the data pulse
   * clocks, this is the concatenation of the filter, frame number, timestamp,
   * difficulty, issuer address, previous frame's output, along with data
   * mutation and availability proofs. Elements that are also in the fields of
   * the clock frame are not included in this field due to redundancy. For the
   * ceremony phase, this is a singular clock fusing master and data pulses.
   */
  input: Uint8Array;
  /**
   * The output data from the VDF, serialized as bytes. For Wesolowski, this is
   * an encoding of the 258 byte Y value concatenated with the 258 byte proof
   * value.
   */
  output: Uint8Array;
  /** Any aggregate proofs to be rolled into the committed clock frame. */
  aggregateProofs: InclusionAggregateProof[];
  publicKeySignatureEd448?: Ed448Signature | undefined;
}

export interface ClockFrameParentSelectors {
  frameNumber: Long;
  parentSelector: Uint8Array;
}

/**
 * Represents a request for a range of clock frames. Used to stay synchronized
 * to the latest state.
 */
export interface ClockFramesRequest {
  /** The filter is used as a domain separator for input to the frames. */
  filter: Uint8Array;
  /** The earliest frame in the range requested. */
  fromFrameNumber: Long;
  /**
   * The latest frame in the range requested, if provided. Capped to a maximum
   * size of 128 frames.
   */
  toFrameNumber: Long;
  /**
   * The optional parent selector. If provided, will perform a check to confirm
   * continuity, otherwise, will rewind the sync head to the beginning.
   */
  parentSelector: Uint8Array;
  /**
   * The optional range selectors. If provided, will perform a check against
   * them to optimize the provided deltas.
   */
  rangeParentSelectors: ClockFrameParentSelectors[];
}

export interface ClockFramesPreflight {
  rangeParentSelectors: ClockFrameParentSelectors[];
}

/**
 * Represents a response for a range of clock frames. Used to stay synchronized
 * to the latest state.
 */
export interface ClockFramesResponse {
  /** The filter is used as a domain separator for input to the frames. */
  filter: Uint8Array;
  /**
   * The earliest frame in the range response. Paginated to a maximum size of
   * 128 frames per response.
   */
  fromFrameNumber: Long;
  /** The latest frame in the range response. */
  toFrameNumber: Long;
  /** The set of clock frames within the provided range. */
  clockFrames: ClockFrame[];
}

function createBaseClockFrame(): ClockFrame {
  return {
    filter: new Uint8Array(0),
    frameNumber: Long.UZERO,
    timestamp: Long.ZERO,
    difficulty: 0,
    parentSelector: new Uint8Array(0),
    input: new Uint8Array(0),
    output: new Uint8Array(0),
    aggregateProofs: [],
    publicKeySignatureEd448: undefined,
  };
}

export const ClockFrame: MessageFns<ClockFrame> = {
  encode(message: ClockFrame, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filter.length !== 0) {
      writer.uint32(10).bytes(message.filter);
    }
    if (!message.frameNumber.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.frameNumber.toString());
    }
    if (!message.timestamp.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.timestamp.toString());
    }
    if (message.difficulty !== 0) {
      writer.uint32(32).uint32(message.difficulty);
    }
    if (message.parentSelector.length !== 0) {
      writer.uint32(42).bytes(message.parentSelector);
    }
    if (message.input.length !== 0) {
      writer.uint32(50).bytes(message.input);
    }
    if (message.output.length !== 0) {
      writer.uint32(58).bytes(message.output);
    }
    for (const v of message.aggregateProofs) {
      InclusionAggregateProof.encode(v!, writer.uint32(66).fork()).join();
    }
    if (message.publicKeySignatureEd448 !== undefined) {
      Ed448Signature.encode(message.publicKeySignatureEd448, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClockFrame {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClockFrame();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filter = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.frameNumber = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.timestamp = Long.fromString(reader.int64().toString());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.difficulty = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.parentSelector = reader.bytes();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.input = reader.bytes();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.output = reader.bytes();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.aggregateProofs.push(InclusionAggregateProof.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.publicKeySignatureEd448 = Ed448Signature.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClockFrame {
    return {
      filter: isSet(object.filter) ? bytesFromBase64(object.filter) : new Uint8Array(0),
      frameNumber: isSet(object.frameNumber) ? Long.fromValue(object.frameNumber) : Long.UZERO,
      timestamp: isSet(object.timestamp) ? Long.fromValue(object.timestamp) : Long.ZERO,
      difficulty: isSet(object.difficulty) ? globalThis.Number(object.difficulty) : 0,
      parentSelector: isSet(object.parentSelector) ? bytesFromBase64(object.parentSelector) : new Uint8Array(0),
      input: isSet(object.input) ? bytesFromBase64(object.input) : new Uint8Array(0),
      output: isSet(object.output) ? bytesFromBase64(object.output) : new Uint8Array(0),
      aggregateProofs: globalThis.Array.isArray(object?.aggregateProofs)
        ? object.aggregateProofs.map((e: any) => InclusionAggregateProof.fromJSON(e))
        : [],
      publicKeySignatureEd448: isSet(object.publicKeySignatureEd448)
        ? Ed448Signature.fromJSON(object.publicKeySignatureEd448)
        : undefined,
    };
  },

  toJSON(message: ClockFrame): unknown {
    const obj: any = {};
    if (message.filter.length !== 0) {
      obj.filter = base64FromBytes(message.filter);
    }
    if (!message.frameNumber.equals(Long.UZERO)) {
      obj.frameNumber = (message.frameNumber || Long.UZERO).toString();
    }
    if (!message.timestamp.equals(Long.ZERO)) {
      obj.timestamp = (message.timestamp || Long.ZERO).toString();
    }
    if (message.difficulty !== 0) {
      obj.difficulty = Math.round(message.difficulty);
    }
    if (message.parentSelector.length !== 0) {
      obj.parentSelector = base64FromBytes(message.parentSelector);
    }
    if (message.input.length !== 0) {
      obj.input = base64FromBytes(message.input);
    }
    if (message.output.length !== 0) {
      obj.output = base64FromBytes(message.output);
    }
    if (message.aggregateProofs?.length) {
      obj.aggregateProofs = message.aggregateProofs.map((e) => InclusionAggregateProof.toJSON(e));
    }
    if (message.publicKeySignatureEd448 !== undefined) {
      obj.publicKeySignatureEd448 = Ed448Signature.toJSON(message.publicKeySignatureEd448);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClockFrame>, I>>(base?: I): ClockFrame {
    return ClockFrame.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClockFrame>, I>>(object: I): ClockFrame {
    const message = createBaseClockFrame();
    message.filter = object.filter ?? new Uint8Array(0);
    message.frameNumber = (object.frameNumber !== undefined && object.frameNumber !== null)
      ? Long.fromValue(object.frameNumber)
      : Long.UZERO;
    message.timestamp = (object.timestamp !== undefined && object.timestamp !== null)
      ? Long.fromValue(object.timestamp)
      : Long.ZERO;
    message.difficulty = object.difficulty ?? 0;
    message.parentSelector = object.parentSelector ?? new Uint8Array(0);
    message.input = object.input ?? new Uint8Array(0);
    message.output = object.output ?? new Uint8Array(0);
    message.aggregateProofs = object.aggregateProofs?.map((e) => InclusionAggregateProof.fromPartial(e)) || [];
    message.publicKeySignatureEd448 =
      (object.publicKeySignatureEd448 !== undefined && object.publicKeySignatureEd448 !== null)
        ? Ed448Signature.fromPartial(object.publicKeySignatureEd448)
        : undefined;
    return message;
  },
};

function createBaseClockFrameParentSelectors(): ClockFrameParentSelectors {
  return { frameNumber: Long.UZERO, parentSelector: new Uint8Array(0) };
}

export const ClockFrameParentSelectors: MessageFns<ClockFrameParentSelectors> = {
  encode(message: ClockFrameParentSelectors, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.frameNumber.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.frameNumber.toString());
    }
    if (message.parentSelector.length !== 0) {
      writer.uint32(18).bytes(message.parentSelector);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClockFrameParentSelectors {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClockFrameParentSelectors();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.frameNumber = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.parentSelector = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClockFrameParentSelectors {
    return {
      frameNumber: isSet(object.frameNumber) ? Long.fromValue(object.frameNumber) : Long.UZERO,
      parentSelector: isSet(object.parentSelector) ? bytesFromBase64(object.parentSelector) : new Uint8Array(0),
    };
  },

  toJSON(message: ClockFrameParentSelectors): unknown {
    const obj: any = {};
    if (!message.frameNumber.equals(Long.UZERO)) {
      obj.frameNumber = (message.frameNumber || Long.UZERO).toString();
    }
    if (message.parentSelector.length !== 0) {
      obj.parentSelector = base64FromBytes(message.parentSelector);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClockFrameParentSelectors>, I>>(base?: I): ClockFrameParentSelectors {
    return ClockFrameParentSelectors.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClockFrameParentSelectors>, I>>(object: I): ClockFrameParentSelectors {
    const message = createBaseClockFrameParentSelectors();
    message.frameNumber = (object.frameNumber !== undefined && object.frameNumber !== null)
      ? Long.fromValue(object.frameNumber)
      : Long.UZERO;
    message.parentSelector = object.parentSelector ?? new Uint8Array(0);
    return message;
  },
};

function createBaseClockFramesRequest(): ClockFramesRequest {
  return {
    filter: new Uint8Array(0),
    fromFrameNumber: Long.UZERO,
    toFrameNumber: Long.UZERO,
    parentSelector: new Uint8Array(0),
    rangeParentSelectors: [],
  };
}

export const ClockFramesRequest: MessageFns<ClockFramesRequest> = {
  encode(message: ClockFramesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filter.length !== 0) {
      writer.uint32(10).bytes(message.filter);
    }
    if (!message.fromFrameNumber.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.fromFrameNumber.toString());
    }
    if (!message.toFrameNumber.equals(Long.UZERO)) {
      writer.uint32(24).uint64(message.toFrameNumber.toString());
    }
    if (message.parentSelector.length !== 0) {
      writer.uint32(34).bytes(message.parentSelector);
    }
    for (const v of message.rangeParentSelectors) {
      ClockFrameParentSelectors.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClockFramesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClockFramesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filter = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.fromFrameNumber = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.toFrameNumber = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.parentSelector = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.rangeParentSelectors.push(ClockFrameParentSelectors.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClockFramesRequest {
    return {
      filter: isSet(object.filter) ? bytesFromBase64(object.filter) : new Uint8Array(0),
      fromFrameNumber: isSet(object.fromFrameNumber) ? Long.fromValue(object.fromFrameNumber) : Long.UZERO,
      toFrameNumber: isSet(object.toFrameNumber) ? Long.fromValue(object.toFrameNumber) : Long.UZERO,
      parentSelector: isSet(object.parentSelector) ? bytesFromBase64(object.parentSelector) : new Uint8Array(0),
      rangeParentSelectors: globalThis.Array.isArray(object?.rangeParentSelectors)
        ? object.rangeParentSelectors.map((e: any) => ClockFrameParentSelectors.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ClockFramesRequest): unknown {
    const obj: any = {};
    if (message.filter.length !== 0) {
      obj.filter = base64FromBytes(message.filter);
    }
    if (!message.fromFrameNumber.equals(Long.UZERO)) {
      obj.fromFrameNumber = (message.fromFrameNumber || Long.UZERO).toString();
    }
    if (!message.toFrameNumber.equals(Long.UZERO)) {
      obj.toFrameNumber = (message.toFrameNumber || Long.UZERO).toString();
    }
    if (message.parentSelector.length !== 0) {
      obj.parentSelector = base64FromBytes(message.parentSelector);
    }
    if (message.rangeParentSelectors?.length) {
      obj.rangeParentSelectors = message.rangeParentSelectors.map((e) => ClockFrameParentSelectors.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClockFramesRequest>, I>>(base?: I): ClockFramesRequest {
    return ClockFramesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClockFramesRequest>, I>>(object: I): ClockFramesRequest {
    const message = createBaseClockFramesRequest();
    message.filter = object.filter ?? new Uint8Array(0);
    message.fromFrameNumber = (object.fromFrameNumber !== undefined && object.fromFrameNumber !== null)
      ? Long.fromValue(object.fromFrameNumber)
      : Long.UZERO;
    message.toFrameNumber = (object.toFrameNumber !== undefined && object.toFrameNumber !== null)
      ? Long.fromValue(object.toFrameNumber)
      : Long.UZERO;
    message.parentSelector = object.parentSelector ?? new Uint8Array(0);
    message.rangeParentSelectors = object.rangeParentSelectors?.map((e) => ClockFrameParentSelectors.fromPartial(e)) ||
      [];
    return message;
  },
};

function createBaseClockFramesPreflight(): ClockFramesPreflight {
  return { rangeParentSelectors: [] };
}

export const ClockFramesPreflight: MessageFns<ClockFramesPreflight> = {
  encode(message: ClockFramesPreflight, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.rangeParentSelectors) {
      ClockFrameParentSelectors.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClockFramesPreflight {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClockFramesPreflight();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rangeParentSelectors.push(ClockFrameParentSelectors.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClockFramesPreflight {
    return {
      rangeParentSelectors: globalThis.Array.isArray(object?.rangeParentSelectors)
        ? object.rangeParentSelectors.map((e: any) => ClockFrameParentSelectors.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ClockFramesPreflight): unknown {
    const obj: any = {};
    if (message.rangeParentSelectors?.length) {
      obj.rangeParentSelectors = message.rangeParentSelectors.map((e) => ClockFrameParentSelectors.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClockFramesPreflight>, I>>(base?: I): ClockFramesPreflight {
    return ClockFramesPreflight.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClockFramesPreflight>, I>>(object: I): ClockFramesPreflight {
    const message = createBaseClockFramesPreflight();
    message.rangeParentSelectors = object.rangeParentSelectors?.map((e) => ClockFrameParentSelectors.fromPartial(e)) ||
      [];
    return message;
  },
};

function createBaseClockFramesResponse(): ClockFramesResponse {
  return { filter: new Uint8Array(0), fromFrameNumber: Long.UZERO, toFrameNumber: Long.UZERO, clockFrames: [] };
}

export const ClockFramesResponse: MessageFns<ClockFramesResponse> = {
  encode(message: ClockFramesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filter.length !== 0) {
      writer.uint32(10).bytes(message.filter);
    }
    if (!message.fromFrameNumber.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.fromFrameNumber.toString());
    }
    if (!message.toFrameNumber.equals(Long.UZERO)) {
      writer.uint32(24).uint64(message.toFrameNumber.toString());
    }
    for (const v of message.clockFrames) {
      ClockFrame.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClockFramesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClockFramesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filter = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.fromFrameNumber = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.toFrameNumber = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.clockFrames.push(ClockFrame.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClockFramesResponse {
    return {
      filter: isSet(object.filter) ? bytesFromBase64(object.filter) : new Uint8Array(0),
      fromFrameNumber: isSet(object.fromFrameNumber) ? Long.fromValue(object.fromFrameNumber) : Long.UZERO,
      toFrameNumber: isSet(object.toFrameNumber) ? Long.fromValue(object.toFrameNumber) : Long.UZERO,
      clockFrames: globalThis.Array.isArray(object?.clockFrames)
        ? object.clockFrames.map((e: any) => ClockFrame.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ClockFramesResponse): unknown {
    const obj: any = {};
    if (message.filter.length !== 0) {
      obj.filter = base64FromBytes(message.filter);
    }
    if (!message.fromFrameNumber.equals(Long.UZERO)) {
      obj.fromFrameNumber = (message.fromFrameNumber || Long.UZERO).toString();
    }
    if (!message.toFrameNumber.equals(Long.UZERO)) {
      obj.toFrameNumber = (message.toFrameNumber || Long.UZERO).toString();
    }
    if (message.clockFrames?.length) {
      obj.clockFrames = message.clockFrames.map((e) => ClockFrame.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClockFramesResponse>, I>>(base?: I): ClockFramesResponse {
    return ClockFramesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClockFramesResponse>, I>>(object: I): ClockFramesResponse {
    const message = createBaseClockFramesResponse();
    message.filter = object.filter ?? new Uint8Array(0);
    message.fromFrameNumber = (object.fromFrameNumber !== undefined && object.fromFrameNumber !== null)
      ? Long.fromValue(object.fromFrameNumber)
      : Long.UZERO;
    message.toFrameNumber = (object.toFrameNumber !== undefined && object.toFrameNumber !== null)
      ? Long.fromValue(object.toFrameNumber)
      : Long.UZERO;
    message.clockFrames = object.clockFrames?.map((e) => ClockFrame.fromPartial(e)) || [];
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
