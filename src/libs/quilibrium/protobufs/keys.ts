// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v3.20.3
// source: keys.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "quilibrium.node.keys.pb";

/** Describes a raw Ed448 public key */
export interface Ed448PublicKey {
  /** 57 byte value */
  keyValue: Uint8Array;
}

/**
 * Describes a raw Ed448 private key – notably this is post-derivation,
 * not the seed.
 */
export interface Ed448PrivateKey {
  /** 57 byte value */
  keyValue: Uint8Array;
  publicKey: Ed448PublicKey | undefined;
}

/** Describes a raw Ed448 signature */
export interface Ed448Signature {
  /** 114 byte value */
  signature: Uint8Array;
  publicKey: Ed448PublicKey | undefined;
}

/** Describes a raw X448 public key */
export interface X448PublicKey {
  /** 57 byte value */
  keyValue: Uint8Array;
}

/**
 * Describes a raw X448 private key – notably this is post-derivation,
 * not the seed.
 */
export interface X448PrivateKey {
  /** 57 byte value */
  keyValue: Uint8Array;
  publicKey: X448PublicKey | undefined;
}

/** Describes a raw PCAS public key */
export interface PCASPublicKey {
  /** 256 kilobyte value */
  keyValue: Uint8Array;
}

/** Describes a raw PCAS private key */
export interface PCASPrivateKey {
  /** 256 byte value */
  keyValue: Uint8Array;
  publicKey: PCASPublicKey | undefined;
}

/** Describes a raw compressed BLS48-581 G1 public key */
export interface BLS48581G1PublicKey {
  /** 74 byte value */
  keyValue: Uint8Array;
}

/** Describes a raw BLS48-581 private key, with corresponding G1 public key */
export interface BLS48581G1PrivateKey {
  /** 73 byte value */
  keyValue: Uint8Array;
  publicKey: BLS48581G1PublicKey | undefined;
}

/** Describes a raw compressed BLS48-581 G2 public key */
export interface BLS48581G2PublicKey {
  /** 585 byte value */
  keyValue: Uint8Array;
}

/** Describes a raw BLS48-581 private key, with corresponding G2 public key */
export interface BLS48581G2PrivateKey {
  /** 73 byte value */
  keyValue: Uint8Array;
  publicKey: BLS48581G2PublicKey | undefined;
}

/** Describes a raw BLS48-581 signature, minimal signature size variant */
export interface BLS48581Signature {
  /** 74 byte value */
  signature: Uint8Array;
  publicKey: BLS48581G2PublicKey | undefined;
}

function createBaseEd448PublicKey(): Ed448PublicKey {
  return { keyValue: new Uint8Array(0) };
}

export const Ed448PublicKey: MessageFns<Ed448PublicKey> = {
  encode(message: Ed448PublicKey, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.keyValue.length !== 0) {
      writer.uint32(10).bytes(message.keyValue);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Ed448PublicKey {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEd448PublicKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.keyValue = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Ed448PublicKey {
    return { keyValue: isSet(object.keyValue) ? bytesFromBase64(object.keyValue) : new Uint8Array(0) };
  },

  toJSON(message: Ed448PublicKey): unknown {
    const obj: any = {};
    if (message.keyValue.length !== 0) {
      obj.keyValue = base64FromBytes(message.keyValue);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Ed448PublicKey>, I>>(base?: I): Ed448PublicKey {
    return Ed448PublicKey.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Ed448PublicKey>, I>>(object: I): Ed448PublicKey {
    const message = createBaseEd448PublicKey();
    message.keyValue = object.keyValue ?? new Uint8Array(0);
    return message;
  },
};

function createBaseEd448PrivateKey(): Ed448PrivateKey {
  return { keyValue: new Uint8Array(0), publicKey: undefined };
}

export const Ed448PrivateKey: MessageFns<Ed448PrivateKey> = {
  encode(message: Ed448PrivateKey, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.keyValue.length !== 0) {
      writer.uint32(10).bytes(message.keyValue);
    }
    if (message.publicKey !== undefined) {
      Ed448PublicKey.encode(message.publicKey, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Ed448PrivateKey {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEd448PrivateKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.keyValue = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.publicKey = Ed448PublicKey.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Ed448PrivateKey {
    return {
      keyValue: isSet(object.keyValue) ? bytesFromBase64(object.keyValue) : new Uint8Array(0),
      publicKey: isSet(object.publicKey) ? Ed448PublicKey.fromJSON(object.publicKey) : undefined,
    };
  },

  toJSON(message: Ed448PrivateKey): unknown {
    const obj: any = {};
    if (message.keyValue.length !== 0) {
      obj.keyValue = base64FromBytes(message.keyValue);
    }
    if (message.publicKey !== undefined) {
      obj.publicKey = Ed448PublicKey.toJSON(message.publicKey);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Ed448PrivateKey>, I>>(base?: I): Ed448PrivateKey {
    return Ed448PrivateKey.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Ed448PrivateKey>, I>>(object: I): Ed448PrivateKey {
    const message = createBaseEd448PrivateKey();
    message.keyValue = object.keyValue ?? new Uint8Array(0);
    message.publicKey = (object.publicKey !== undefined && object.publicKey !== null)
      ? Ed448PublicKey.fromPartial(object.publicKey)
      : undefined;
    return message;
  },
};

function createBaseEd448Signature(): Ed448Signature {
  return { signature: new Uint8Array(0), publicKey: undefined };
}

export const Ed448Signature: MessageFns<Ed448Signature> = {
  encode(message: Ed448Signature, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.signature.length !== 0) {
      writer.uint32(10).bytes(message.signature);
    }
    if (message.publicKey !== undefined) {
      Ed448PublicKey.encode(message.publicKey, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Ed448Signature {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEd448Signature();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.signature = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.publicKey = Ed448PublicKey.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Ed448Signature {
    return {
      signature: isSet(object.signature) ? bytesFromBase64(object.signature) : new Uint8Array(0),
      publicKey: isSet(object.publicKey) ? Ed448PublicKey.fromJSON(object.publicKey) : undefined,
    };
  },

  toJSON(message: Ed448Signature): unknown {
    const obj: any = {};
    if (message.signature.length !== 0) {
      obj.signature = base64FromBytes(message.signature);
    }
    if (message.publicKey !== undefined) {
      obj.publicKey = Ed448PublicKey.toJSON(message.publicKey);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Ed448Signature>, I>>(base?: I): Ed448Signature {
    return Ed448Signature.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Ed448Signature>, I>>(object: I): Ed448Signature {
    const message = createBaseEd448Signature();
    message.signature = object.signature ?? new Uint8Array(0);
    message.publicKey = (object.publicKey !== undefined && object.publicKey !== null)
      ? Ed448PublicKey.fromPartial(object.publicKey)
      : undefined;
    return message;
  },
};

function createBaseX448PublicKey(): X448PublicKey {
  return { keyValue: new Uint8Array(0) };
}

export const X448PublicKey: MessageFns<X448PublicKey> = {
  encode(message: X448PublicKey, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.keyValue.length !== 0) {
      writer.uint32(10).bytes(message.keyValue);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): X448PublicKey {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseX448PublicKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.keyValue = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): X448PublicKey {
    return { keyValue: isSet(object.keyValue) ? bytesFromBase64(object.keyValue) : new Uint8Array(0) };
  },

  toJSON(message: X448PublicKey): unknown {
    const obj: any = {};
    if (message.keyValue.length !== 0) {
      obj.keyValue = base64FromBytes(message.keyValue);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<X448PublicKey>, I>>(base?: I): X448PublicKey {
    return X448PublicKey.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<X448PublicKey>, I>>(object: I): X448PublicKey {
    const message = createBaseX448PublicKey();
    message.keyValue = object.keyValue ?? new Uint8Array(0);
    return message;
  },
};

function createBaseX448PrivateKey(): X448PrivateKey {
  return { keyValue: new Uint8Array(0), publicKey: undefined };
}

export const X448PrivateKey: MessageFns<X448PrivateKey> = {
  encode(message: X448PrivateKey, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.keyValue.length !== 0) {
      writer.uint32(10).bytes(message.keyValue);
    }
    if (message.publicKey !== undefined) {
      X448PublicKey.encode(message.publicKey, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): X448PrivateKey {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseX448PrivateKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.keyValue = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.publicKey = X448PublicKey.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): X448PrivateKey {
    return {
      keyValue: isSet(object.keyValue) ? bytesFromBase64(object.keyValue) : new Uint8Array(0),
      publicKey: isSet(object.publicKey) ? X448PublicKey.fromJSON(object.publicKey) : undefined,
    };
  },

  toJSON(message: X448PrivateKey): unknown {
    const obj: any = {};
    if (message.keyValue.length !== 0) {
      obj.keyValue = base64FromBytes(message.keyValue);
    }
    if (message.publicKey !== undefined) {
      obj.publicKey = X448PublicKey.toJSON(message.publicKey);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<X448PrivateKey>, I>>(base?: I): X448PrivateKey {
    return X448PrivateKey.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<X448PrivateKey>, I>>(object: I): X448PrivateKey {
    const message = createBaseX448PrivateKey();
    message.keyValue = object.keyValue ?? new Uint8Array(0);
    message.publicKey = (object.publicKey !== undefined && object.publicKey !== null)
      ? X448PublicKey.fromPartial(object.publicKey)
      : undefined;
    return message;
  },
};

function createBasePCASPublicKey(): PCASPublicKey {
  return { keyValue: new Uint8Array(0) };
}

export const PCASPublicKey: MessageFns<PCASPublicKey> = {
  encode(message: PCASPublicKey, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.keyValue.length !== 0) {
      writer.uint32(10).bytes(message.keyValue);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PCASPublicKey {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePCASPublicKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.keyValue = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PCASPublicKey {
    return { keyValue: isSet(object.keyValue) ? bytesFromBase64(object.keyValue) : new Uint8Array(0) };
  },

  toJSON(message: PCASPublicKey): unknown {
    const obj: any = {};
    if (message.keyValue.length !== 0) {
      obj.keyValue = base64FromBytes(message.keyValue);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PCASPublicKey>, I>>(base?: I): PCASPublicKey {
    return PCASPublicKey.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PCASPublicKey>, I>>(object: I): PCASPublicKey {
    const message = createBasePCASPublicKey();
    message.keyValue = object.keyValue ?? new Uint8Array(0);
    return message;
  },
};

function createBasePCASPrivateKey(): PCASPrivateKey {
  return { keyValue: new Uint8Array(0), publicKey: undefined };
}

export const PCASPrivateKey: MessageFns<PCASPrivateKey> = {
  encode(message: PCASPrivateKey, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.keyValue.length !== 0) {
      writer.uint32(10).bytes(message.keyValue);
    }
    if (message.publicKey !== undefined) {
      PCASPublicKey.encode(message.publicKey, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PCASPrivateKey {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePCASPrivateKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.keyValue = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.publicKey = PCASPublicKey.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PCASPrivateKey {
    return {
      keyValue: isSet(object.keyValue) ? bytesFromBase64(object.keyValue) : new Uint8Array(0),
      publicKey: isSet(object.publicKey) ? PCASPublicKey.fromJSON(object.publicKey) : undefined,
    };
  },

  toJSON(message: PCASPrivateKey): unknown {
    const obj: any = {};
    if (message.keyValue.length !== 0) {
      obj.keyValue = base64FromBytes(message.keyValue);
    }
    if (message.publicKey !== undefined) {
      obj.publicKey = PCASPublicKey.toJSON(message.publicKey);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PCASPrivateKey>, I>>(base?: I): PCASPrivateKey {
    return PCASPrivateKey.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PCASPrivateKey>, I>>(object: I): PCASPrivateKey {
    const message = createBasePCASPrivateKey();
    message.keyValue = object.keyValue ?? new Uint8Array(0);
    message.publicKey = (object.publicKey !== undefined && object.publicKey !== null)
      ? PCASPublicKey.fromPartial(object.publicKey)
      : undefined;
    return message;
  },
};

function createBaseBLS48581G1PublicKey(): BLS48581G1PublicKey {
  return { keyValue: new Uint8Array(0) };
}

export const BLS48581G1PublicKey: MessageFns<BLS48581G1PublicKey> = {
  encode(message: BLS48581G1PublicKey, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.keyValue.length !== 0) {
      writer.uint32(10).bytes(message.keyValue);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BLS48581G1PublicKey {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBLS48581G1PublicKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.keyValue = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BLS48581G1PublicKey {
    return { keyValue: isSet(object.keyValue) ? bytesFromBase64(object.keyValue) : new Uint8Array(0) };
  },

  toJSON(message: BLS48581G1PublicKey): unknown {
    const obj: any = {};
    if (message.keyValue.length !== 0) {
      obj.keyValue = base64FromBytes(message.keyValue);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BLS48581G1PublicKey>, I>>(base?: I): BLS48581G1PublicKey {
    return BLS48581G1PublicKey.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BLS48581G1PublicKey>, I>>(object: I): BLS48581G1PublicKey {
    const message = createBaseBLS48581G1PublicKey();
    message.keyValue = object.keyValue ?? new Uint8Array(0);
    return message;
  },
};

function createBaseBLS48581G1PrivateKey(): BLS48581G1PrivateKey {
  return { keyValue: new Uint8Array(0), publicKey: undefined };
}

export const BLS48581G1PrivateKey: MessageFns<BLS48581G1PrivateKey> = {
  encode(message: BLS48581G1PrivateKey, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.keyValue.length !== 0) {
      writer.uint32(10).bytes(message.keyValue);
    }
    if (message.publicKey !== undefined) {
      BLS48581G1PublicKey.encode(message.publicKey, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BLS48581G1PrivateKey {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBLS48581G1PrivateKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.keyValue = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.publicKey = BLS48581G1PublicKey.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BLS48581G1PrivateKey {
    return {
      keyValue: isSet(object.keyValue) ? bytesFromBase64(object.keyValue) : new Uint8Array(0),
      publicKey: isSet(object.publicKey) ? BLS48581G1PublicKey.fromJSON(object.publicKey) : undefined,
    };
  },

  toJSON(message: BLS48581G1PrivateKey): unknown {
    const obj: any = {};
    if (message.keyValue.length !== 0) {
      obj.keyValue = base64FromBytes(message.keyValue);
    }
    if (message.publicKey !== undefined) {
      obj.publicKey = BLS48581G1PublicKey.toJSON(message.publicKey);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BLS48581G1PrivateKey>, I>>(base?: I): BLS48581G1PrivateKey {
    return BLS48581G1PrivateKey.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BLS48581G1PrivateKey>, I>>(object: I): BLS48581G1PrivateKey {
    const message = createBaseBLS48581G1PrivateKey();
    message.keyValue = object.keyValue ?? new Uint8Array(0);
    message.publicKey = (object.publicKey !== undefined && object.publicKey !== null)
      ? BLS48581G1PublicKey.fromPartial(object.publicKey)
      : undefined;
    return message;
  },
};

function createBaseBLS48581G2PublicKey(): BLS48581G2PublicKey {
  return { keyValue: new Uint8Array(0) };
}

export const BLS48581G2PublicKey: MessageFns<BLS48581G2PublicKey> = {
  encode(message: BLS48581G2PublicKey, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.keyValue.length !== 0) {
      writer.uint32(10).bytes(message.keyValue);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BLS48581G2PublicKey {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBLS48581G2PublicKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.keyValue = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BLS48581G2PublicKey {
    return { keyValue: isSet(object.keyValue) ? bytesFromBase64(object.keyValue) : new Uint8Array(0) };
  },

  toJSON(message: BLS48581G2PublicKey): unknown {
    const obj: any = {};
    if (message.keyValue.length !== 0) {
      obj.keyValue = base64FromBytes(message.keyValue);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BLS48581G2PublicKey>, I>>(base?: I): BLS48581G2PublicKey {
    return BLS48581G2PublicKey.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BLS48581G2PublicKey>, I>>(object: I): BLS48581G2PublicKey {
    const message = createBaseBLS48581G2PublicKey();
    message.keyValue = object.keyValue ?? new Uint8Array(0);
    return message;
  },
};

function createBaseBLS48581G2PrivateKey(): BLS48581G2PrivateKey {
  return { keyValue: new Uint8Array(0), publicKey: undefined };
}

export const BLS48581G2PrivateKey: MessageFns<BLS48581G2PrivateKey> = {
  encode(message: BLS48581G2PrivateKey, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.keyValue.length !== 0) {
      writer.uint32(10).bytes(message.keyValue);
    }
    if (message.publicKey !== undefined) {
      BLS48581G2PublicKey.encode(message.publicKey, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BLS48581G2PrivateKey {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBLS48581G2PrivateKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.keyValue = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.publicKey = BLS48581G2PublicKey.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BLS48581G2PrivateKey {
    return {
      keyValue: isSet(object.keyValue) ? bytesFromBase64(object.keyValue) : new Uint8Array(0),
      publicKey: isSet(object.publicKey) ? BLS48581G2PublicKey.fromJSON(object.publicKey) : undefined,
    };
  },

  toJSON(message: BLS48581G2PrivateKey): unknown {
    const obj: any = {};
    if (message.keyValue.length !== 0) {
      obj.keyValue = base64FromBytes(message.keyValue);
    }
    if (message.publicKey !== undefined) {
      obj.publicKey = BLS48581G2PublicKey.toJSON(message.publicKey);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BLS48581G2PrivateKey>, I>>(base?: I): BLS48581G2PrivateKey {
    return BLS48581G2PrivateKey.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BLS48581G2PrivateKey>, I>>(object: I): BLS48581G2PrivateKey {
    const message = createBaseBLS48581G2PrivateKey();
    message.keyValue = object.keyValue ?? new Uint8Array(0);
    message.publicKey = (object.publicKey !== undefined && object.publicKey !== null)
      ? BLS48581G2PublicKey.fromPartial(object.publicKey)
      : undefined;
    return message;
  },
};

function createBaseBLS48581Signature(): BLS48581Signature {
  return { signature: new Uint8Array(0), publicKey: undefined };
}

export const BLS48581Signature: MessageFns<BLS48581Signature> = {
  encode(message: BLS48581Signature, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.signature.length !== 0) {
      writer.uint32(10).bytes(message.signature);
    }
    if (message.publicKey !== undefined) {
      BLS48581G2PublicKey.encode(message.publicKey, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BLS48581Signature {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBLS48581Signature();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.signature = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.publicKey = BLS48581G2PublicKey.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BLS48581Signature {
    return {
      signature: isSet(object.signature) ? bytesFromBase64(object.signature) : new Uint8Array(0),
      publicKey: isSet(object.publicKey) ? BLS48581G2PublicKey.fromJSON(object.publicKey) : undefined,
    };
  },

  toJSON(message: BLS48581Signature): unknown {
    const obj: any = {};
    if (message.signature.length !== 0) {
      obj.signature = base64FromBytes(message.signature);
    }
    if (message.publicKey !== undefined) {
      obj.publicKey = BLS48581G2PublicKey.toJSON(message.publicKey);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BLS48581Signature>, I>>(base?: I): BLS48581Signature {
    return BLS48581Signature.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BLS48581Signature>, I>>(object: I): BLS48581Signature {
    const message = createBaseBLS48581Signature();
    message.signature = object.signature ?? new Uint8Array(0);
    message.publicKey = (object.publicKey !== undefined && object.publicKey !== null)
      ? BLS48581G2PublicKey.fromPartial(object.publicKey)
      : undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
